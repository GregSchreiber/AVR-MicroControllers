
Capacitive Soil Moisture Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000e04  00000e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  0080012e  0080012e  00000ec6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0f  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a4  00000000  00000000  00001d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f6  00000000  00000000  000026cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056f  00000000  00000000  00002f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a1  00000000  00000000  000034d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_18>
  4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3c       	cpi	r26, 0xCB	; 203
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  9e:	0c 94 00 07 	jmp	0xe00	; 0xe00 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_adc>:
	
	// Were going to use the external AVCC reference
	/*
	 * Bit 6 : 1 - AVCC with external capacitor at AREF pin
	 */ 
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	 * Bit 1 : 1 - Prescaler
	 * Bit 0 : 1 - Prescaler
	 * (The prescaler is set to a div factor of 128
	 *
	 */
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <ADC_Read_Value>:
uint16_t ADC_Read_Value(void){
	// Create Variable for raw ADC value
	uint16_t value;
	
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	
	// Wait until conversion finished
	while(ADCSRA & (1<<ADSC)) {
  be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c2:	86 fd       	sbrc	r24, 6
  c4:	fc cf       	rjmp	.-8      	; 0xbe <ADC_Read_Value+0xa>
		;
	}
	
	// Set the raw value to the ADC output	
	value = ADC;
  c6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	// Return the raw value
	return value;
}
  ce:	08 95       	ret

000000d0 <para_scaling>:
	float temp2;
	int engineering_value;
	
	// The following process forms the para scaling required for the percentage conversion
	// Square the raw adc value
	temp1 = (uint32_t)raw_value * (uint32_t)raw_value;
  d0:	9c 01       	movw	r18, r24
  d2:	dc 01       	movw	r26, r24
  d4:	0e 94 13 04 	call	0x826	; 0x826 <__umulhisi3>
	// 1 div squared adc value - para scaling
	temp2 = 1 / (float) temp1; 
  d8:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
  dc:	9b 01       	movw	r18, r22
  de:	ac 01       	movw	r20, r24
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	9f e3       	ldi	r25, 0x3F	; 63
  e8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__divsf3>
	// The scaling factor here is based on the maximum resistance which equates to 0%.
	engineering_value = (temp2 *  3562520) - 16; 
  ec:	20 e6       	ldi	r18, 0x60	; 96
  ee:	30 e7       	ldi	r19, 0x70	; 112
  f0:	49 e5       	ldi	r20, 0x59	; 89
  f2:	5a e4       	ldi	r21, 0x4A	; 74
  f4:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	40 e8       	ldi	r20, 0x80	; 128
  fe:	51 e4       	ldi	r21, 0x41	; 65
 100:	0e 94 03 02 	call	0x406	; 0x406 <__subsf3>
 104:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fixsfsi>
	// This scaling factor here is based on the minimum resistance which equates to 100%.
	engineering_value = engineering_value * 1.369; 
 108:	07 2e       	mov	r0, r23
 10a:	00 0c       	add	r0, r0
 10c:	88 0b       	sbc	r24, r24
 10e:	99 0b       	sbc	r25, r25
 110:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
 114:	24 e6       	ldi	r18, 0x64	; 100
 116:	3b e3       	ldi	r19, 0x3B	; 59
 118:	4f ea       	ldi	r20, 0xAF	; 175
 11a:	5f e3       	ldi	r21, 0x3F	; 63
 11c:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 120:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__fixsfsi>
	
	// Return the percentage value
	return engineering_value;
}
 124:	cb 01       	movw	r24, r22
 126:	08 95       	ret

00000128 <init_timer1>:
 * This program is to set up timer 1 as a CTC
 */
void init_timer1(void){
	
	// On board LED is connected to Pin B5
	DDRB = (1<<5);
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	84 b9       	out	0x04, r24	; 4
	// Set initial LED state to off
	LED_State = 0;
 12c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x1>
 130:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	
	/* 
	 * Set Up Timer/Counter 1 to produce the interrupt
	 */
	// Set compare value
	OCR1A = 62500;
 134:	84 e2       	ldi	r24, 0x24	; 36
 136:	94 ef       	ldi	r25, 0xF4	; 244
 138:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	/* Set Timer Compare Mode (CTC Mode)
	 *
	 * TCCR1A No bits required
	 * TCCR1B WGM12 for CTC mode, CS12 for Clk/256 (Prescaler)
	 */
	TCCR1A = 0;
 140:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<CS12);
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Enable Compare Interrupt (On output compare match)
	TIMSK1 = (1<<OCIE1A);
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	// Ensure interrupt flag is cleared
	TIFR1 = (1<<OCF1A);
 150:	86 bb       	out	0x16, r24	; 22
 152:	08 95       	ret

00000154 <__vector_11>:
/*
 * Interrupt for Timer 1 Compare
 *
 * This Interrupt Service Routine toggles the state of the LED pin
 */ 
ISR(TIMER1_COMPA_vect) {
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25

	// Use a switch statement for the LED state (This keeps the ISR as short as possible).
	switch (LED_State) {
 162:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 166:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	19 f0       	breq	.+6      	; 0x174 <__vector_11+0x20>
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	51 f0       	breq	.+20     	; 0x186 <__vector_11+0x32>
 172:	0e c0       	rjmp	.+28     	; 0x190 <__vector_11+0x3c>
		// If LED off turn on
		case 0:
			PORTB = (1<<5);
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	85 b9       	out	0x05, r24	; 5
			LED_State = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 180:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			break;
 184:	05 c0       	rjmp	.+10     	; 0x190 <__vector_11+0x3c>
		// If LED on turn off
		case 1:
			PORTB = (0<<5);
 186:	15 b8       	out	0x05, r1	; 5
			LED_State = 0;
 188:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x1>
 18c:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
			break;
	}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:
	// Create Variable for ADC value & Moisture Percentage
	uint16_t ADC_value;
	int moisture_percentage;
	
	// Enable Timer 1 for heartbeat LEd
	init_timer1();
 19e:	0e 94 94 00 	call	0x128	; 0x128 <init_timer1>
	
	// Set UART
	init_uart();
 1a2:	0e 94 56 01 	call	0x2ac	; 0x2ac <init_uart>
	
	// Initialize the ADC
	init_adc();
 1a6:	0e 94 53 00 	call	0xa6	; 0xa6 <init_adc>
	
	// Turn on global interrupts
	sei();
 1aa:	78 94       	sei
	
    // Application Code
    while (1) {
		
		// Read the ADC value
		ADC_value = ADC_Read_Value();
 1ac:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_Read_Value>
		
		// Print the value to the serial window (DEBUG)
		//printf("The raw value is %u \n", ADC_value);
		
		// Scale the ADC value to a percentage & output to the serial window
		moisture_percentage = para_scaling(ADC_value);
 1b0:	0e 94 68 00 	call	0xd0	; 0xd0 <para_scaling>
		printf("The percentage value is %d %% \n", moisture_percentage);
 1b4:	9f 93       	push	r25
 1b6:	8f 93       	push	r24
 1b8:	8e e0       	ldi	r24, 0x0E	; 14
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	9f 93       	push	r25
 1be:	8f 93       	push	r24
 1c0:	0e 94 22 04 	call	0x844	; 0x844 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	81 e1       	ldi	r24, 0x11	; 17
 1c8:	9a e7       	ldi	r25, 0x7A	; 122
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x2c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x36>
 1d4:	00 00       	nop
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	e6 cf       	rjmp	.-52     	; 0x1ac <main+0xe>

000001e0 <uart_put_char>:
}

/*
 * A function for putting characters in the buffer
 */
static int uart_put_char(char c, FILE* stream) {
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
 1e4:	8a 30       	cpi	r24, 0x0A	; 10
 1e6:	19 f4       	brne	.+6      	; 0x1ee <uart_put_char+0xe>
		uart_put_char('\r', stream);
 1e8:	8d e0       	ldi	r24, 0x0D	; 13
 1ea:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
 1ee:	9f b7       	in	r25, 0x3f	; 63
 1f0:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <uart_put_char+0x18>
		if(!interrupts_enabled) {
 1f4:	99 23       	and	r25, r25
 1f6:	29 f1       	breq	.+74     	; 0x242 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
 1f8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
 1fc:	88 23       	and	r24, r24
 1fe:	d4 f3       	brlt	.-12     	; 0x1f4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
 200:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
 202:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <out_insert_pos>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	8e 0f       	add	r24, r30
 20a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <out_insert_pos>
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ee 5c       	subi	r30, 0xCE	; 206
 212:	fe 4f       	sbci	r31, 0xFE	; 254
 214:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
 216:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
 220:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <out_insert_pos>
 224:	80 38       	cpi	r24, 0x80	; 128
 226:	11 f4       	brne	.+4      	; 0x22c <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
 228:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
 22c:	e1 ec       	ldi	r30, 0xC1	; 193
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 62       	ori	r24, 0x20	; 32
 234:	80 83       	st	Z, r24
	if(interrupts_enabled) {
 236:	99 23       	and	r25, r25
 238:	39 f0       	breq	.+14     	; 0x248 <uart_put_char+0x68>
		sei();
 23a:	78 94       	sei
	}
	return 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	05 c0       	rjmp	.+10     	; 0x24c <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <uart_put_char+0x6c>
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
}
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <uart_get_char>:
/*
 * A function for getting characters from the buffer
 */
int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
 250:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <bytes_in_input_buffer>
 254:	88 23       	and	r24, r24
 256:	e1 f3       	breq	.-8      	; 0x250 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
 258:	2f b7       	in	r18, 0x3f	; 63
 25a:	20 78       	andi	r18, 0x80	; 128
	cli();
 25c:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
 25e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <input_insert_pos>
 262:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <bytes_in_input_buffer>
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	83 1b       	sub	r24, r19
 26a:	91 09       	sbc	r25, r1
 26c:	5a f4       	brpl	.+22     	; 0x284 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
 26e:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <input_insert_pos>
 272:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <bytes_in_input_buffer>
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	e8 1b       	sub	r30, r24
 27a:	f1 09       	sbc	r31, r1
 27c:	ed 53       	subi	r30, 0x3D	; 61
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 81       	ld	r24, Z
 282:	0a c0       	rjmp	.+20     	; 0x298 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
 284:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <input_insert_pos>
 288:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <bytes_in_input_buffer>
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	e8 1b       	sub	r30, r24
 290:	f1 09       	sbc	r31, r1
 292:	ed 54       	subi	r30, 0x4D	; 77
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
 298:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <bytes_in_input_buffer>
 29c:	91 50       	subi	r25, 0x01	; 1
 29e:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <bytes_in_input_buffer>
	if(interrupts_enabled) {
 2a2:	22 23       	and	r18, r18
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <uart_get_char+0x58>
		sei();
 2a6:	78 94       	sei
	}	
	return c;
}
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	08 95       	ret

000002ac <init_uart>:
 * A function for initializing UART communication
 */
void init_uart(void){
	
	// Set the baud rate to 19200
	UBRR0 = 51;
 2ac:	83 e3       	ldi	r24, 0x33	; 51
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Initialize our buffers
	out_insert_pos = 0;
 2b8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <out_insert_pos>
	bytes_in_out_buffer = 0;
 2bc:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <bytes_in_out_buffer>
	input_insert_pos = 0;
 2c0:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <input_insert_pos>
	bytes_in_input_buffer = 0;
 2c4:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <bytes_in_input_buffer>
	input_overrun = 0;
 2c8:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <input_overrun>
	 * Enable the following bits
	 * Bit 3 - TXEN0 - Transmit Enable
	 * Bit 4 - RXEN0 - Receive Enable
	 * Bit 7 - RXCIE0 - Receive Complete Interrupt
	 */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2cc:	88 e9       	ldi	r24, 0x98	; 152
 2ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	stdout = &myStream;
 2d2:	e5 ec       	ldi	r30, 0xC5	; 197
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	93 83       	std	Z+3, r25	; 0x03
 2dc:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
 2de:	91 83       	std	Z+1, r25	; 0x01
 2e0:	80 83       	st	Z, r24
 2e2:	08 95       	ret

000002e4 <__vector_19>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART_UDRE_vect) 
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
 2f8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
 2fc:	88 23       	and	r24, r24
 2fe:	29 f1       	breq	.+74     	; 0x34a <__vector_19+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
 300:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <out_insert_pos>
 304:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <bytes_in_out_buffer>
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	82 1b       	sub	r24, r18
 30c:	91 09       	sbc	r25, r1
 30e:	5a f4       	brpl	.+22     	; 0x326 <__vector_19+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
 310:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <out_insert_pos>
 314:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	e8 1b       	sub	r30, r24
 31c:	f1 09       	sbc	r31, r1
 31e:	ee 54       	subi	r30, 0x4E	; 78
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	90 81       	ld	r25, Z
 324:	0a c0       	rjmp	.+20     	; 0x33a <__vector_19+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 326:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <out_insert_pos>
 32a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	e8 1b       	sub	r30, r24
 332:	f1 09       	sbc	r31, r1
 334:	ee 5c       	subi	r30, 0xCE	; 206
 336:	fe 4f       	sbci	r31, 0xFE	; 254
 338:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
 33a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
 33e:	81 50       	subi	r24, 0x01	; 1
 340:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
 344:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 348:	05 c0       	rjmp	.+10     	; 0x354 <__vector_19+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
 34a:	e1 ec       	ldi	r30, 0xC1	; 193
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	8f 7d       	andi	r24, 0xDF	; 223
 352:	80 83       	st	Z, r24
	}
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_18>:
 * Define the interrupt handler for UART Receive Complete (i.e. 
 * we can read a character. The character is read and placed in
 * the input buffer.
 */
ISR(USART_RX_vect) 
{	
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	2f 93       	push	r18
 374:	3f 93       	push	r19
 376:	4f 93       	push	r20
 378:	5f 93       	push	r21
 37a:	6f 93       	push	r22
 37c:	7f 93       	push	r23
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
 382:	af 93       	push	r26
 384:	bf 93       	push	r27
 386:	cf 93       	push	r28
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
	/* Read the character */
	char c;
	c = UDR0;
 38c:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 390:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <bytes_in_out_buffer>
 394:	88 23       	and	r24, r24
 396:	2c f0       	brlt	.+10     	; 0x3a2 <__vector_18+0x3a>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	8c 2f       	mov	r24, r28
 39e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 3a2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <bytes_in_input_buffer>
 3a6:	80 31       	cpi	r24, 0x10	; 16
 3a8:	20 f0       	brcs	.+8      	; 0x3b2 <__vector_18+0x4a>
		input_overrun = 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <input_overrun>
 3b0:	18 c0       	rjmp	.+48     	; 0x3e2 <__vector_18+0x7a>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
 3b2:	cd 30       	cpi	r28, 0x0D	; 13
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <__vector_18+0x50>
			c = '\n';
 3b6:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
 3b8:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <input_insert_pos>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	8e 0f       	add	r24, r30
 3c0:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <input_insert_pos>
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	ed 54       	subi	r30, 0x4D	; 77
 3c8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ca:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
 3cc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <bytes_in_input_buffer>
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
 3d6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <input_insert_pos>
 3da:	80 31       	cpi	r24, 0x10	; 16
 3dc:	11 f4       	brne	.+4      	; 0x3e2 <__vector_18+0x7a>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
 3de:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <input_insert_pos>
		}
	}
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	cf 91       	pop	r28
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <__subsf3>:
 406:	50 58       	subi	r21, 0x80	; 128

00000408 <__addsf3>:
 408:	bb 27       	eor	r27, r27
 40a:	aa 27       	eor	r26, r26
 40c:	0e 94 1b 02 	call	0x436	; 0x436 <__addsf3x>
 410:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 414:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 418:	38 f0       	brcs	.+14     	; 0x428 <__addsf3+0x20>
 41a:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 41e:	20 f0       	brcs	.+8      	; 0x428 <__addsf3+0x20>
 420:	39 f4       	brne	.+14     	; 0x430 <__addsf3+0x28>
 422:	9f 3f       	cpi	r25, 0xFF	; 255
 424:	19 f4       	brne	.+6      	; 0x42c <__addsf3+0x24>
 426:	26 f4       	brtc	.+8      	; 0x430 <__addsf3+0x28>
 428:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>
 42c:	0e f4       	brtc	.+2      	; 0x430 <__addsf3+0x28>
 42e:	e0 95       	com	r30
 430:	e7 fb       	bst	r30, 7
 432:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>

00000436 <__addsf3x>:
 436:	e9 2f       	mov	r30, r25
 438:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 43c:	58 f3       	brcs	.-42     	; 0x414 <__addsf3+0xc>
 43e:	ba 17       	cp	r27, r26
 440:	62 07       	cpc	r22, r18
 442:	73 07       	cpc	r23, r19
 444:	84 07       	cpc	r24, r20
 446:	95 07       	cpc	r25, r21
 448:	20 f0       	brcs	.+8      	; 0x452 <__addsf3x+0x1c>
 44a:	79 f4       	brne	.+30     	; 0x46a <__addsf3x+0x34>
 44c:	a6 f5       	brtc	.+104    	; 0x4b6 <__addsf3x+0x80>
 44e:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_zero>
 452:	0e f4       	brtc	.+2      	; 0x456 <__addsf3x+0x20>
 454:	e0 95       	com	r30
 456:	0b 2e       	mov	r0, r27
 458:	ba 2f       	mov	r27, r26
 45a:	a0 2d       	mov	r26, r0
 45c:	0b 01       	movw	r0, r22
 45e:	b9 01       	movw	r22, r18
 460:	90 01       	movw	r18, r0
 462:	0c 01       	movw	r0, r24
 464:	ca 01       	movw	r24, r20
 466:	a0 01       	movw	r20, r0
 468:	11 24       	eor	r1, r1
 46a:	ff 27       	eor	r31, r31
 46c:	59 1b       	sub	r21, r25
 46e:	99 f0       	breq	.+38     	; 0x496 <__addsf3x+0x60>
 470:	59 3f       	cpi	r21, 0xF9	; 249
 472:	50 f4       	brcc	.+20     	; 0x488 <__addsf3x+0x52>
 474:	50 3e       	cpi	r21, 0xE0	; 224
 476:	68 f1       	brcs	.+90     	; 0x4d2 <__addsf3x+0x9c>
 478:	1a 16       	cp	r1, r26
 47a:	f0 40       	sbci	r31, 0x00	; 0
 47c:	a2 2f       	mov	r26, r18
 47e:	23 2f       	mov	r18, r19
 480:	34 2f       	mov	r19, r20
 482:	44 27       	eor	r20, r20
 484:	58 5f       	subi	r21, 0xF8	; 248
 486:	f3 cf       	rjmp	.-26     	; 0x46e <__addsf3x+0x38>
 488:	46 95       	lsr	r20
 48a:	37 95       	ror	r19
 48c:	27 95       	ror	r18
 48e:	a7 95       	ror	r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	53 95       	inc	r21
 494:	c9 f7       	brne	.-14     	; 0x488 <__addsf3x+0x52>
 496:	7e f4       	brtc	.+30     	; 0x4b6 <__addsf3x+0x80>
 498:	1f 16       	cp	r1, r31
 49a:	ba 0b       	sbc	r27, r26
 49c:	62 0b       	sbc	r22, r18
 49e:	73 0b       	sbc	r23, r19
 4a0:	84 0b       	sbc	r24, r20
 4a2:	ba f0       	brmi	.+46     	; 0x4d2 <__addsf3x+0x9c>
 4a4:	91 50       	subi	r25, 0x01	; 1
 4a6:	a1 f0       	breq	.+40     	; 0x4d0 <__addsf3x+0x9a>
 4a8:	ff 0f       	add	r31, r31
 4aa:	bb 1f       	adc	r27, r27
 4ac:	66 1f       	adc	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	c2 f7       	brpl	.-16     	; 0x4a4 <__addsf3x+0x6e>
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__addsf3x+0x9c>
 4b6:	ba 0f       	add	r27, r26
 4b8:	62 1f       	adc	r22, r18
 4ba:	73 1f       	adc	r23, r19
 4bc:	84 1f       	adc	r24, r20
 4be:	48 f4       	brcc	.+18     	; 0x4d2 <__addsf3x+0x9c>
 4c0:	87 95       	ror	r24
 4c2:	77 95       	ror	r23
 4c4:	67 95       	ror	r22
 4c6:	b7 95       	ror	r27
 4c8:	f7 95       	ror	r31
 4ca:	9e 3f       	cpi	r25, 0xFE	; 254
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__addsf3x+0x9a>
 4ce:	b0 cf       	rjmp	.-160    	; 0x430 <__addsf3+0x28>
 4d0:	93 95       	inc	r25
 4d2:	88 0f       	add	r24, r24
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <__addsf3x+0xa2>
 4d6:	99 27       	eor	r25, r25
 4d8:	ee 0f       	add	r30, r30
 4da:	97 95       	ror	r25
 4dc:	87 95       	ror	r24
 4de:	08 95       	ret

000004e0 <__divsf3>:
 4e0:	0e 94 84 02 	call	0x508	; 0x508 <__divsf3x>
 4e4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 4e8:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 4ec:	58 f0       	brcs	.+22     	; 0x504 <__divsf3+0x24>
 4ee:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 4f2:	40 f0       	brcs	.+16     	; 0x504 <__divsf3+0x24>
 4f4:	29 f4       	brne	.+10     	; 0x500 <__divsf3+0x20>
 4f6:	5f 3f       	cpi	r21, 0xFF	; 255
 4f8:	29 f0       	breq	.+10     	; 0x504 <__divsf3+0x24>
 4fa:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 4fe:	51 11       	cpse	r21, r1
 500:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 504:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>

00000508 <__divsf3x>:
 508:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 50c:	68 f3       	brcs	.-38     	; 0x4e8 <__divsf3+0x8>

0000050e <__divsf3_pse>:
 50e:	99 23       	and	r25, r25
 510:	b1 f3       	breq	.-20     	; 0x4fe <__divsf3+0x1e>
 512:	55 23       	and	r21, r21
 514:	91 f3       	breq	.-28     	; 0x4fa <__divsf3+0x1a>
 516:	95 1b       	sub	r25, r21
 518:	55 0b       	sbc	r21, r21
 51a:	bb 27       	eor	r27, r27
 51c:	aa 27       	eor	r26, r26
 51e:	62 17       	cp	r22, r18
 520:	73 07       	cpc	r23, r19
 522:	84 07       	cpc	r24, r20
 524:	38 f0       	brcs	.+14     	; 0x534 <__divsf3_pse+0x26>
 526:	9f 5f       	subi	r25, 0xFF	; 255
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	22 0f       	add	r18, r18
 52c:	33 1f       	adc	r19, r19
 52e:	44 1f       	adc	r20, r20
 530:	aa 1f       	adc	r26, r26
 532:	a9 f3       	breq	.-22     	; 0x51e <__divsf3_pse+0x10>
 534:	35 d0       	rcall	.+106    	; 0x5a0 <__divsf3_pse+0x92>
 536:	0e 2e       	mov	r0, r30
 538:	3a f0       	brmi	.+14     	; 0x548 <__divsf3_pse+0x3a>
 53a:	e0 e8       	ldi	r30, 0x80	; 128
 53c:	32 d0       	rcall	.+100    	; 0x5a2 <__divsf3_pse+0x94>
 53e:	91 50       	subi	r25, 0x01	; 1
 540:	50 40       	sbci	r21, 0x00	; 0
 542:	e6 95       	lsr	r30
 544:	00 1c       	adc	r0, r0
 546:	ca f7       	brpl	.-14     	; 0x53a <__divsf3_pse+0x2c>
 548:	2b d0       	rcall	.+86     	; 0x5a0 <__divsf3_pse+0x92>
 54a:	fe 2f       	mov	r31, r30
 54c:	29 d0       	rcall	.+82     	; 0x5a0 <__divsf3_pse+0x92>
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	88 1f       	adc	r24, r24
 554:	bb 1f       	adc	r27, r27
 556:	26 17       	cp	r18, r22
 558:	37 07       	cpc	r19, r23
 55a:	48 07       	cpc	r20, r24
 55c:	ab 07       	cpc	r26, r27
 55e:	b0 e8       	ldi	r27, 0x80	; 128
 560:	09 f0       	breq	.+2      	; 0x564 <__divsf3_pse+0x56>
 562:	bb 0b       	sbc	r27, r27
 564:	80 2d       	mov	r24, r0
 566:	bf 01       	movw	r22, r30
 568:	ff 27       	eor	r31, r31
 56a:	93 58       	subi	r25, 0x83	; 131
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	3a f0       	brmi	.+14     	; 0x57e <__divsf3_pse+0x70>
 570:	9e 3f       	cpi	r25, 0xFE	; 254
 572:	51 05       	cpc	r21, r1
 574:	78 f0       	brcs	.+30     	; 0x594 <__divsf3_pse+0x86>
 576:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 57a:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 57e:	5f 3f       	cpi	r21, 0xFF	; 255
 580:	e4 f3       	brlt	.-8      	; 0x57a <__divsf3_pse+0x6c>
 582:	98 3e       	cpi	r25, 0xE8	; 232
 584:	d4 f3       	brlt	.-12     	; 0x57a <__divsf3_pse+0x6c>
 586:	86 95       	lsr	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	b7 95       	ror	r27
 58e:	f7 95       	ror	r31
 590:	9f 5f       	subi	r25, 0xFF	; 255
 592:	c9 f7       	brne	.-14     	; 0x586 <__divsf3_pse+0x78>
 594:	88 0f       	add	r24, r24
 596:	91 1d       	adc	r25, r1
 598:	96 95       	lsr	r25
 59a:	87 95       	ror	r24
 59c:	97 f9       	bld	r25, 7
 59e:	08 95       	ret
 5a0:	e1 e0       	ldi	r30, 0x01	; 1
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	88 1f       	adc	r24, r24
 5a8:	bb 1f       	adc	r27, r27
 5aa:	62 17       	cp	r22, r18
 5ac:	73 07       	cpc	r23, r19
 5ae:	84 07       	cpc	r24, r20
 5b0:	ba 07       	cpc	r27, r26
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <__divsf3_pse+0xae>
 5b4:	62 1b       	sub	r22, r18
 5b6:	73 0b       	sbc	r23, r19
 5b8:	84 0b       	sbc	r24, r20
 5ba:	ba 0b       	sbc	r27, r26
 5bc:	ee 1f       	adc	r30, r30
 5be:	88 f7       	brcc	.-30     	; 0x5a2 <__divsf3_pse+0x94>
 5c0:	e0 95       	com	r30
 5c2:	08 95       	ret

000005c4 <__fixsfsi>:
 5c4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
 5c8:	68 94       	set
 5ca:	b1 11       	cpse	r27, r1
 5cc:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 5d0:	08 95       	ret

000005d2 <__fixunssfsi>:
 5d2:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_splitA>
 5d6:	88 f0       	brcs	.+34     	; 0x5fa <__fixunssfsi+0x28>
 5d8:	9f 57       	subi	r25, 0x7F	; 127
 5da:	98 f0       	brcs	.+38     	; 0x602 <__fixunssfsi+0x30>
 5dc:	b9 2f       	mov	r27, r25
 5de:	99 27       	eor	r25, r25
 5e0:	b7 51       	subi	r27, 0x17	; 23
 5e2:	b0 f0       	brcs	.+44     	; 0x610 <__fixunssfsi+0x3e>
 5e4:	e1 f0       	breq	.+56     	; 0x61e <__fixunssfsi+0x4c>
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	88 1f       	adc	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	1a f0       	brmi	.+6      	; 0x5f6 <__fixunssfsi+0x24>
 5f0:	ba 95       	dec	r27
 5f2:	c9 f7       	brne	.-14     	; 0x5e6 <__fixunssfsi+0x14>
 5f4:	14 c0       	rjmp	.+40     	; 0x61e <__fixunssfsi+0x4c>
 5f6:	b1 30       	cpi	r27, 0x01	; 1
 5f8:	91 f0       	breq	.+36     	; 0x61e <__fixunssfsi+0x4c>
 5fa:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_zero>
 5fe:	b1 e0       	ldi	r27, 0x01	; 1
 600:	08 95       	ret
 602:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_zero>
 606:	67 2f       	mov	r22, r23
 608:	78 2f       	mov	r23, r24
 60a:	88 27       	eor	r24, r24
 60c:	b8 5f       	subi	r27, 0xF8	; 248
 60e:	39 f0       	breq	.+14     	; 0x61e <__fixunssfsi+0x4c>
 610:	b9 3f       	cpi	r27, 0xF9	; 249
 612:	cc f3       	brlt	.-14     	; 0x606 <__fixunssfsi+0x34>
 614:	86 95       	lsr	r24
 616:	77 95       	ror	r23
 618:	67 95       	ror	r22
 61a:	b3 95       	inc	r27
 61c:	d9 f7       	brne	.-10     	; 0x614 <__fixunssfsi+0x42>
 61e:	3e f4       	brtc	.+14     	; 0x62e <__fixunssfsi+0x5c>
 620:	90 95       	com	r25
 622:	80 95       	com	r24
 624:	70 95       	com	r23
 626:	61 95       	neg	r22
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__floatunsisf>:
 630:	e8 94       	clt
 632:	09 c0       	rjmp	.+18     	; 0x646 <__floatsisf+0x12>

00000634 <__floatsisf>:
 634:	97 fb       	bst	r25, 7
 636:	3e f4       	brtc	.+14     	; 0x646 <__floatsisf+0x12>
 638:	90 95       	com	r25
 63a:	80 95       	com	r24
 63c:	70 95       	com	r23
 63e:	61 95       	neg	r22
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	8f 4f       	sbci	r24, 0xFF	; 255
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	99 23       	and	r25, r25
 648:	a9 f0       	breq	.+42     	; 0x674 <__floatsisf+0x40>
 64a:	f9 2f       	mov	r31, r25
 64c:	96 e9       	ldi	r25, 0x96	; 150
 64e:	bb 27       	eor	r27, r27
 650:	93 95       	inc	r25
 652:	f6 95       	lsr	r31
 654:	87 95       	ror	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b7 95       	ror	r27
 65c:	f1 11       	cpse	r31, r1
 65e:	f8 cf       	rjmp	.-16     	; 0x650 <__floatsisf+0x1c>
 660:	fa f4       	brpl	.+62     	; 0x6a0 <__floatsisf+0x6c>
 662:	bb 0f       	add	r27, r27
 664:	11 f4       	brne	.+4      	; 0x66a <__floatsisf+0x36>
 666:	60 ff       	sbrs	r22, 0
 668:	1b c0       	rjmp	.+54     	; 0x6a0 <__floatsisf+0x6c>
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	16 c0       	rjmp	.+44     	; 0x6a0 <__floatsisf+0x6c>
 674:	88 23       	and	r24, r24
 676:	11 f0       	breq	.+4      	; 0x67c <__floatsisf+0x48>
 678:	96 e9       	ldi	r25, 0x96	; 150
 67a:	11 c0       	rjmp	.+34     	; 0x69e <__floatsisf+0x6a>
 67c:	77 23       	and	r23, r23
 67e:	21 f0       	breq	.+8      	; 0x688 <__floatsisf+0x54>
 680:	9e e8       	ldi	r25, 0x8E	; 142
 682:	87 2f       	mov	r24, r23
 684:	76 2f       	mov	r23, r22
 686:	05 c0       	rjmp	.+10     	; 0x692 <__floatsisf+0x5e>
 688:	66 23       	and	r22, r22
 68a:	71 f0       	breq	.+28     	; 0x6a8 <__floatsisf+0x74>
 68c:	96 e8       	ldi	r25, 0x86	; 134
 68e:	86 2f       	mov	r24, r22
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	2a f0       	brmi	.+10     	; 0x6a0 <__floatsisf+0x6c>
 696:	9a 95       	dec	r25
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	da f7       	brpl	.-10     	; 0x696 <__floatsisf+0x62>
 6a0:	88 0f       	add	r24, r24
 6a2:	96 95       	lsr	r25
 6a4:	87 95       	ror	r24
 6a6:	97 f9       	bld	r25, 7
 6a8:	08 95       	ret

000006aa <__fp_inf>:
 6aa:	97 f9       	bld	r25, 7
 6ac:	9f 67       	ori	r25, 0x7F	; 127
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	08 95       	ret

000006b6 <__fp_nan>:
 6b6:	9f ef       	ldi	r25, 0xFF	; 255
 6b8:	80 ec       	ldi	r24, 0xC0	; 192
 6ba:	08 95       	ret

000006bc <__fp_pscA>:
 6bc:	00 24       	eor	r0, r0
 6be:	0a 94       	dec	r0
 6c0:	16 16       	cp	r1, r22
 6c2:	17 06       	cpc	r1, r23
 6c4:	18 06       	cpc	r1, r24
 6c6:	09 06       	cpc	r0, r25
 6c8:	08 95       	ret

000006ca <__fp_pscB>:
 6ca:	00 24       	eor	r0, r0
 6cc:	0a 94       	dec	r0
 6ce:	12 16       	cp	r1, r18
 6d0:	13 06       	cpc	r1, r19
 6d2:	14 06       	cpc	r1, r20
 6d4:	05 06       	cpc	r0, r21
 6d6:	08 95       	ret

000006d8 <__fp_round>:
 6d8:	09 2e       	mov	r0, r25
 6da:	03 94       	inc	r0
 6dc:	00 0c       	add	r0, r0
 6de:	11 f4       	brne	.+4      	; 0x6e4 <__fp_round+0xc>
 6e0:	88 23       	and	r24, r24
 6e2:	52 f0       	brmi	.+20     	; 0x6f8 <__fp_round+0x20>
 6e4:	bb 0f       	add	r27, r27
 6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__fp_round+0x20>
 6e8:	bf 2b       	or	r27, r31
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__fp_round+0x18>
 6ec:	60 ff       	sbrs	r22, 0
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__fp_round+0x20>
 6f0:	6f 5f       	subi	r22, 0xFF	; 255
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	08 95       	ret

000006fa <__fp_split3>:
 6fa:	57 fd       	sbrc	r21, 7
 6fc:	90 58       	subi	r25, 0x80	; 128
 6fe:	44 0f       	add	r20, r20
 700:	55 1f       	adc	r21, r21
 702:	59 f0       	breq	.+22     	; 0x71a <__fp_splitA+0x10>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	71 f0       	breq	.+28     	; 0x724 <__fp_splitA+0x1a>
 708:	47 95       	ror	r20

0000070a <__fp_splitA>:
 70a:	88 0f       	add	r24, r24
 70c:	97 fb       	bst	r25, 7
 70e:	99 1f       	adc	r25, r25
 710:	61 f0       	breq	.+24     	; 0x72a <__fp_splitA+0x20>
 712:	9f 3f       	cpi	r25, 0xFF	; 255
 714:	79 f0       	breq	.+30     	; 0x734 <__fp_splitA+0x2a>
 716:	87 95       	ror	r24
 718:	08 95       	ret
 71a:	12 16       	cp	r1, r18
 71c:	13 06       	cpc	r1, r19
 71e:	14 06       	cpc	r1, r20
 720:	55 1f       	adc	r21, r21
 722:	f2 cf       	rjmp	.-28     	; 0x708 <__fp_split3+0xe>
 724:	46 95       	lsr	r20
 726:	f1 df       	rcall	.-30     	; 0x70a <__fp_splitA>
 728:	08 c0       	rjmp	.+16     	; 0x73a <__fp_splitA+0x30>
 72a:	16 16       	cp	r1, r22
 72c:	17 06       	cpc	r1, r23
 72e:	18 06       	cpc	r1, r24
 730:	99 1f       	adc	r25, r25
 732:	f1 cf       	rjmp	.-30     	; 0x716 <__fp_splitA+0xc>
 734:	86 95       	lsr	r24
 736:	71 05       	cpc	r23, r1
 738:	61 05       	cpc	r22, r1
 73a:	08 94       	sec
 73c:	08 95       	ret

0000073e <__fp_zero>:
 73e:	e8 94       	clt

00000740 <__fp_szero>:
 740:	bb 27       	eor	r27, r27
 742:	66 27       	eor	r22, r22
 744:	77 27       	eor	r23, r23
 746:	cb 01       	movw	r24, r22
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__mulsf3>:
 74c:	0e 94 b9 03 	call	0x772	; 0x772 <__mulsf3x>
 750:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 754:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 758:	38 f0       	brcs	.+14     	; 0x768 <__mulsf3+0x1c>
 75a:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 75e:	20 f0       	brcs	.+8      	; 0x768 <__mulsf3+0x1c>
 760:	95 23       	and	r25, r21
 762:	11 f0       	breq	.+4      	; 0x768 <__mulsf3+0x1c>
 764:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 768:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>
 76c:	11 24       	eor	r1, r1
 76e:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>

00000772 <__mulsf3x>:
 772:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 776:	70 f3       	brcs	.-36     	; 0x754 <__mulsf3+0x8>

00000778 <__mulsf3_pse>:
 778:	95 9f       	mul	r25, r21
 77a:	c1 f3       	breq	.-16     	; 0x76c <__mulsf3+0x20>
 77c:	95 0f       	add	r25, r21
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	55 1f       	adc	r21, r21
 782:	62 9f       	mul	r22, r18
 784:	f0 01       	movw	r30, r0
 786:	72 9f       	mul	r23, r18
 788:	bb 27       	eor	r27, r27
 78a:	f0 0d       	add	r31, r0
 78c:	b1 1d       	adc	r27, r1
 78e:	63 9f       	mul	r22, r19
 790:	aa 27       	eor	r26, r26
 792:	f0 0d       	add	r31, r0
 794:	b1 1d       	adc	r27, r1
 796:	aa 1f       	adc	r26, r26
 798:	64 9f       	mul	r22, r20
 79a:	66 27       	eor	r22, r22
 79c:	b0 0d       	add	r27, r0
 79e:	a1 1d       	adc	r26, r1
 7a0:	66 1f       	adc	r22, r22
 7a2:	82 9f       	mul	r24, r18
 7a4:	22 27       	eor	r18, r18
 7a6:	b0 0d       	add	r27, r0
 7a8:	a1 1d       	adc	r26, r1
 7aa:	62 1f       	adc	r22, r18
 7ac:	73 9f       	mul	r23, r19
 7ae:	b0 0d       	add	r27, r0
 7b0:	a1 1d       	adc	r26, r1
 7b2:	62 1f       	adc	r22, r18
 7b4:	83 9f       	mul	r24, r19
 7b6:	a0 0d       	add	r26, r0
 7b8:	61 1d       	adc	r22, r1
 7ba:	22 1f       	adc	r18, r18
 7bc:	74 9f       	mul	r23, r20
 7be:	33 27       	eor	r19, r19
 7c0:	a0 0d       	add	r26, r0
 7c2:	61 1d       	adc	r22, r1
 7c4:	23 1f       	adc	r18, r19
 7c6:	84 9f       	mul	r24, r20
 7c8:	60 0d       	add	r22, r0
 7ca:	21 1d       	adc	r18, r1
 7cc:	82 2f       	mov	r24, r18
 7ce:	76 2f       	mov	r23, r22
 7d0:	6a 2f       	mov	r22, r26
 7d2:	11 24       	eor	r1, r1
 7d4:	9f 57       	subi	r25, 0x7F	; 127
 7d6:	50 40       	sbci	r21, 0x00	; 0
 7d8:	9a f0       	brmi	.+38     	; 0x800 <__DATA_REGION_LENGTH__>
 7da:	f1 f0       	breq	.+60     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7dc:	88 23       	and	r24, r24
 7de:	4a f0       	brmi	.+18     	; 0x7f2 <__mulsf3_pse+0x7a>
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	bb 1f       	adc	r27, r27
 7e6:	66 1f       	adc	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	a9 f7       	brne	.-22     	; 0x7dc <__mulsf3_pse+0x64>
 7f2:	9e 3f       	cpi	r25, 0xFE	; 254
 7f4:	51 05       	cpc	r21, r1
 7f6:	80 f0       	brcs	.+32     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7f8:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 7fc:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 800:	5f 3f       	cpi	r21, 0xFF	; 255
 802:	e4 f3       	brlt	.-8      	; 0x7fc <__mulsf3_pse+0x84>
 804:	98 3e       	cpi	r25, 0xE8	; 232
 806:	d4 f3       	brlt	.-12     	; 0x7fc <__mulsf3_pse+0x84>
 808:	86 95       	lsr	r24
 80a:	77 95       	ror	r23
 80c:	67 95       	ror	r22
 80e:	b7 95       	ror	r27
 810:	f7 95       	ror	r31
 812:	e7 95       	ror	r30
 814:	9f 5f       	subi	r25, 0xFF	; 255
 816:	c1 f7       	brne	.-16     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 818:	fe 2b       	or	r31, r30
 81a:	88 0f       	add	r24, r24
 81c:	91 1d       	adc	r25, r1
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret

00000826 <__umulhisi3>:
 826:	a2 9f       	mul	r26, r18
 828:	b0 01       	movw	r22, r0
 82a:	b3 9f       	mul	r27, r19
 82c:	c0 01       	movw	r24, r0
 82e:	a3 9f       	mul	r26, r19
 830:	70 0d       	add	r23, r0
 832:	81 1d       	adc	r24, r1
 834:	11 24       	eor	r1, r1
 836:	91 1d       	adc	r25, r1
 838:	b2 9f       	mul	r27, r18
 83a:	70 0d       	add	r23, r0
 83c:	81 1d       	adc	r24, r1
 83e:	11 24       	eor	r1, r1
 840:	91 1d       	adc	r25, r1
 842:	08 95       	ret

00000844 <printf>:
 844:	a0 e0       	ldi	r26, 0x00	; 0
 846:	b0 e0       	ldi	r27, 0x00	; 0
 848:	e8 e2       	ldi	r30, 0x28	; 40
 84a:	f4 e0       	ldi	r31, 0x04	; 4
 84c:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__prologue_saves__+0x20>
 850:	ae 01       	movw	r20, r28
 852:	4b 5f       	subi	r20, 0xFB	; 251
 854:	5f 4f       	sbci	r21, 0xFF	; 255
 856:	fa 01       	movw	r30, r20
 858:	61 91       	ld	r22, Z+
 85a:	71 91       	ld	r23, Z+
 85c:	af 01       	movw	r20, r30
 85e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <__iob+0x2>
 862:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <__iob+0x3>
 866:	0e 94 38 04 	call	0x870	; 0x870 <vfprintf>
 86a:	e2 e0       	ldi	r30, 0x02	; 2
 86c:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__epilogue_restores__+0x20>

00000870 <vfprintf>:
 870:	ab e0       	ldi	r26, 0x0B	; 11
 872:	b0 e0       	ldi	r27, 0x00	; 0
 874:	ee e3       	ldi	r30, 0x3E	; 62
 876:	f4 e0       	ldi	r31, 0x04	; 4
 878:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__prologue_saves__>
 87c:	6c 01       	movw	r12, r24
 87e:	7b 01       	movw	r14, r22
 880:	8a 01       	movw	r16, r20
 882:	fc 01       	movw	r30, r24
 884:	17 82       	std	Z+7, r1	; 0x07
 886:	16 82       	std	Z+6, r1	; 0x06
 888:	83 81       	ldd	r24, Z+3	; 0x03
 88a:	81 ff       	sbrs	r24, 1
 88c:	cc c1       	rjmp	.+920    	; 0xc26 <__stack+0x327>
 88e:	ce 01       	movw	r24, r28
 890:	01 96       	adiw	r24, 0x01	; 1
 892:	3c 01       	movw	r6, r24
 894:	f6 01       	movw	r30, r12
 896:	93 81       	ldd	r25, Z+3	; 0x03
 898:	f7 01       	movw	r30, r14
 89a:	93 fd       	sbrc	r25, 3
 89c:	85 91       	lpm	r24, Z+
 89e:	93 ff       	sbrs	r25, 3
 8a0:	81 91       	ld	r24, Z+
 8a2:	7f 01       	movw	r14, r30
 8a4:	88 23       	and	r24, r24
 8a6:	09 f4       	brne	.+2      	; 0x8aa <vfprintf+0x3a>
 8a8:	ba c1       	rjmp	.+884    	; 0xc1e <__stack+0x31f>
 8aa:	85 32       	cpi	r24, 0x25	; 37
 8ac:	39 f4       	brne	.+14     	; 0x8bc <vfprintf+0x4c>
 8ae:	93 fd       	sbrc	r25, 3
 8b0:	85 91       	lpm	r24, Z+
 8b2:	93 ff       	sbrs	r25, 3
 8b4:	81 91       	ld	r24, Z+
 8b6:	7f 01       	movw	r14, r30
 8b8:	85 32       	cpi	r24, 0x25	; 37
 8ba:	29 f4       	brne	.+10     	; 0x8c6 <vfprintf+0x56>
 8bc:	b6 01       	movw	r22, r12
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 8c4:	e7 cf       	rjmp	.-50     	; 0x894 <vfprintf+0x24>
 8c6:	91 2c       	mov	r9, r1
 8c8:	21 2c       	mov	r2, r1
 8ca:	31 2c       	mov	r3, r1
 8cc:	ff e1       	ldi	r31, 0x1F	; 31
 8ce:	f3 15       	cp	r31, r3
 8d0:	d8 f0       	brcs	.+54     	; 0x908 <__stack+0x9>
 8d2:	8b 32       	cpi	r24, 0x2B	; 43
 8d4:	79 f0       	breq	.+30     	; 0x8f4 <vfprintf+0x84>
 8d6:	38 f4       	brcc	.+14     	; 0x8e6 <vfprintf+0x76>
 8d8:	80 32       	cpi	r24, 0x20	; 32
 8da:	79 f0       	breq	.+30     	; 0x8fa <vfprintf+0x8a>
 8dc:	83 32       	cpi	r24, 0x23	; 35
 8de:	a1 f4       	brne	.+40     	; 0x908 <__stack+0x9>
 8e0:	23 2d       	mov	r18, r3
 8e2:	20 61       	ori	r18, 0x10	; 16
 8e4:	1d c0       	rjmp	.+58     	; 0x920 <__stack+0x21>
 8e6:	8d 32       	cpi	r24, 0x2D	; 45
 8e8:	61 f0       	breq	.+24     	; 0x902 <__stack+0x3>
 8ea:	80 33       	cpi	r24, 0x30	; 48
 8ec:	69 f4       	brne	.+26     	; 0x908 <__stack+0x9>
 8ee:	23 2d       	mov	r18, r3
 8f0:	21 60       	ori	r18, 0x01	; 1
 8f2:	16 c0       	rjmp	.+44     	; 0x920 <__stack+0x21>
 8f4:	83 2d       	mov	r24, r3
 8f6:	82 60       	ori	r24, 0x02	; 2
 8f8:	38 2e       	mov	r3, r24
 8fa:	e3 2d       	mov	r30, r3
 8fc:	e4 60       	ori	r30, 0x04	; 4
 8fe:	3e 2e       	mov	r3, r30
 900:	2a c0       	rjmp	.+84     	; 0x956 <__stack+0x57>
 902:	f3 2d       	mov	r31, r3
 904:	f8 60       	ori	r31, 0x08	; 8
 906:	1d c0       	rjmp	.+58     	; 0x942 <__stack+0x43>
 908:	37 fc       	sbrc	r3, 7
 90a:	2d c0       	rjmp	.+90     	; 0x966 <__stack+0x67>
 90c:	20 ed       	ldi	r18, 0xD0	; 208
 90e:	28 0f       	add	r18, r24
 910:	2a 30       	cpi	r18, 0x0A	; 10
 912:	40 f0       	brcs	.+16     	; 0x924 <__stack+0x25>
 914:	8e 32       	cpi	r24, 0x2E	; 46
 916:	b9 f4       	brne	.+46     	; 0x946 <__stack+0x47>
 918:	36 fc       	sbrc	r3, 6
 91a:	81 c1       	rjmp	.+770    	; 0xc1e <__stack+0x31f>
 91c:	23 2d       	mov	r18, r3
 91e:	20 64       	ori	r18, 0x40	; 64
 920:	32 2e       	mov	r3, r18
 922:	19 c0       	rjmp	.+50     	; 0x956 <__stack+0x57>
 924:	36 fe       	sbrs	r3, 6
 926:	06 c0       	rjmp	.+12     	; 0x934 <__stack+0x35>
 928:	8a e0       	ldi	r24, 0x0A	; 10
 92a:	98 9e       	mul	r9, r24
 92c:	20 0d       	add	r18, r0
 92e:	11 24       	eor	r1, r1
 930:	92 2e       	mov	r9, r18
 932:	11 c0       	rjmp	.+34     	; 0x956 <__stack+0x57>
 934:	ea e0       	ldi	r30, 0x0A	; 10
 936:	2e 9e       	mul	r2, r30
 938:	20 0d       	add	r18, r0
 93a:	11 24       	eor	r1, r1
 93c:	22 2e       	mov	r2, r18
 93e:	f3 2d       	mov	r31, r3
 940:	f0 62       	ori	r31, 0x20	; 32
 942:	3f 2e       	mov	r3, r31
 944:	08 c0       	rjmp	.+16     	; 0x956 <__stack+0x57>
 946:	8c 36       	cpi	r24, 0x6C	; 108
 948:	21 f4       	brne	.+8      	; 0x952 <__stack+0x53>
 94a:	83 2d       	mov	r24, r3
 94c:	80 68       	ori	r24, 0x80	; 128
 94e:	38 2e       	mov	r3, r24
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
 952:	88 36       	cpi	r24, 0x68	; 104
 954:	41 f4       	brne	.+16     	; 0x966 <__stack+0x67>
 956:	f7 01       	movw	r30, r14
 958:	93 fd       	sbrc	r25, 3
 95a:	85 91       	lpm	r24, Z+
 95c:	93 ff       	sbrs	r25, 3
 95e:	81 91       	ld	r24, Z+
 960:	7f 01       	movw	r14, r30
 962:	81 11       	cpse	r24, r1
 964:	b3 cf       	rjmp	.-154    	; 0x8cc <vfprintf+0x5c>
 966:	98 2f       	mov	r25, r24
 968:	9f 7d       	andi	r25, 0xDF	; 223
 96a:	95 54       	subi	r25, 0x45	; 69
 96c:	93 30       	cpi	r25, 0x03	; 3
 96e:	28 f4       	brcc	.+10     	; 0x97a <__stack+0x7b>
 970:	0c 5f       	subi	r16, 0xFC	; 252
 972:	1f 4f       	sbci	r17, 0xFF	; 255
 974:	9f e3       	ldi	r25, 0x3F	; 63
 976:	99 83       	std	Y+1, r25	; 0x01
 978:	0d c0       	rjmp	.+26     	; 0x994 <__stack+0x95>
 97a:	83 36       	cpi	r24, 0x63	; 99
 97c:	31 f0       	breq	.+12     	; 0x98a <__stack+0x8b>
 97e:	83 37       	cpi	r24, 0x73	; 115
 980:	71 f0       	breq	.+28     	; 0x99e <__stack+0x9f>
 982:	83 35       	cpi	r24, 0x53	; 83
 984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x89>
 986:	59 c0       	rjmp	.+178    	; 0xa3a <__stack+0x13b>
 988:	21 c0       	rjmp	.+66     	; 0x9cc <__stack+0xcd>
 98a:	f8 01       	movw	r30, r16
 98c:	80 81       	ld	r24, Z
 98e:	89 83       	std	Y+1, r24	; 0x01
 990:	0e 5f       	subi	r16, 0xFE	; 254
 992:	1f 4f       	sbci	r17, 0xFF	; 255
 994:	88 24       	eor	r8, r8
 996:	83 94       	inc	r8
 998:	91 2c       	mov	r9, r1
 99a:	53 01       	movw	r10, r6
 99c:	13 c0       	rjmp	.+38     	; 0x9c4 <__stack+0xc5>
 99e:	28 01       	movw	r4, r16
 9a0:	f2 e0       	ldi	r31, 0x02	; 2
 9a2:	4f 0e       	add	r4, r31
 9a4:	51 1c       	adc	r5, r1
 9a6:	f8 01       	movw	r30, r16
 9a8:	a0 80       	ld	r10, Z
 9aa:	b1 80       	ldd	r11, Z+1	; 0x01
 9ac:	36 fe       	sbrs	r3, 6
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
 9b0:	69 2d       	mov	r22, r9
 9b2:	70 e0       	ldi	r23, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0xbb>
 9b6:	6f ef       	ldi	r22, 0xFF	; 255
 9b8:	7f ef       	ldi	r23, 0xFF	; 255
 9ba:	c5 01       	movw	r24, r10
 9bc:	0e 94 24 06 	call	0xc48	; 0xc48 <strnlen>
 9c0:	4c 01       	movw	r8, r24
 9c2:	82 01       	movw	r16, r4
 9c4:	f3 2d       	mov	r31, r3
 9c6:	ff 77       	andi	r31, 0x7F	; 127
 9c8:	3f 2e       	mov	r3, r31
 9ca:	16 c0       	rjmp	.+44     	; 0x9f8 <__stack+0xf9>
 9cc:	28 01       	movw	r4, r16
 9ce:	22 e0       	ldi	r18, 0x02	; 2
 9d0:	42 0e       	add	r4, r18
 9d2:	51 1c       	adc	r5, r1
 9d4:	f8 01       	movw	r30, r16
 9d6:	a0 80       	ld	r10, Z
 9d8:	b1 80       	ldd	r11, Z+1	; 0x01
 9da:	36 fe       	sbrs	r3, 6
 9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <__stack+0xe5>
 9de:	69 2d       	mov	r22, r9
 9e0:	70 e0       	ldi	r23, 0x00	; 0
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__stack+0xe9>
 9e4:	6f ef       	ldi	r22, 0xFF	; 255
 9e6:	7f ef       	ldi	r23, 0xFF	; 255
 9e8:	c5 01       	movw	r24, r10
 9ea:	0e 94 19 06 	call	0xc32	; 0xc32 <strnlen_P>
 9ee:	4c 01       	movw	r8, r24
 9f0:	f3 2d       	mov	r31, r3
 9f2:	f0 68       	ori	r31, 0x80	; 128
 9f4:	3f 2e       	mov	r3, r31
 9f6:	82 01       	movw	r16, r4
 9f8:	33 fc       	sbrc	r3, 3
 9fa:	1b c0       	rjmp	.+54     	; 0xa32 <__stack+0x133>
 9fc:	82 2d       	mov	r24, r2
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	88 16       	cp	r8, r24
 a02:	99 06       	cpc	r9, r25
 a04:	b0 f4       	brcc	.+44     	; 0xa32 <__stack+0x133>
 a06:	b6 01       	movw	r22, r12
 a08:	80 e2       	ldi	r24, 0x20	; 32
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 a10:	2a 94       	dec	r2
 a12:	f4 cf       	rjmp	.-24     	; 0x9fc <__stack+0xfd>
 a14:	f5 01       	movw	r30, r10
 a16:	37 fc       	sbrc	r3, 7
 a18:	85 91       	lpm	r24, Z+
 a1a:	37 fe       	sbrs	r3, 7
 a1c:	81 91       	ld	r24, Z+
 a1e:	5f 01       	movw	r10, r30
 a20:	b6 01       	movw	r22, r12
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 a28:	21 10       	cpse	r2, r1
 a2a:	2a 94       	dec	r2
 a2c:	21 e0       	ldi	r18, 0x01	; 1
 a2e:	82 1a       	sub	r8, r18
 a30:	91 08       	sbc	r9, r1
 a32:	81 14       	cp	r8, r1
 a34:	91 04       	cpc	r9, r1
 a36:	71 f7       	brne	.-36     	; 0xa14 <__stack+0x115>
 a38:	e8 c0       	rjmp	.+464    	; 0xc0a <__stack+0x30b>
 a3a:	84 36       	cpi	r24, 0x64	; 100
 a3c:	11 f0       	breq	.+4      	; 0xa42 <__stack+0x143>
 a3e:	89 36       	cpi	r24, 0x69	; 105
 a40:	41 f5       	brne	.+80     	; 0xa92 <__stack+0x193>
 a42:	f8 01       	movw	r30, r16
 a44:	37 fe       	sbrs	r3, 7
 a46:	07 c0       	rjmp	.+14     	; 0xa56 <__stack+0x157>
 a48:	60 81       	ld	r22, Z
 a4a:	71 81       	ldd	r23, Z+1	; 0x01
 a4c:	82 81       	ldd	r24, Z+2	; 0x02
 a4e:	93 81       	ldd	r25, Z+3	; 0x03
 a50:	0c 5f       	subi	r16, 0xFC	; 252
 a52:	1f 4f       	sbci	r17, 0xFF	; 255
 a54:	08 c0       	rjmp	.+16     	; 0xa66 <__stack+0x167>
 a56:	60 81       	ld	r22, Z
 a58:	71 81       	ldd	r23, Z+1	; 0x01
 a5a:	07 2e       	mov	r0, r23
 a5c:	00 0c       	add	r0, r0
 a5e:	88 0b       	sbc	r24, r24
 a60:	99 0b       	sbc	r25, r25
 a62:	0e 5f       	subi	r16, 0xFE	; 254
 a64:	1f 4f       	sbci	r17, 0xFF	; 255
 a66:	f3 2d       	mov	r31, r3
 a68:	ff 76       	andi	r31, 0x6F	; 111
 a6a:	3f 2e       	mov	r3, r31
 a6c:	97 ff       	sbrs	r25, 7
 a6e:	09 c0       	rjmp	.+18     	; 0xa82 <__stack+0x183>
 a70:	90 95       	com	r25
 a72:	80 95       	com	r24
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	f0 68       	ori	r31, 0x80	; 128
 a80:	3f 2e       	mov	r3, r31
 a82:	2a e0       	ldi	r18, 0x0A	; 10
 a84:	30 e0       	ldi	r19, 0x00	; 0
 a86:	a3 01       	movw	r20, r6
 a88:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__ultoa_invert>
 a8c:	88 2e       	mov	r8, r24
 a8e:	86 18       	sub	r8, r6
 a90:	45 c0       	rjmp	.+138    	; 0xb1c <__stack+0x21d>
 a92:	85 37       	cpi	r24, 0x75	; 117
 a94:	31 f4       	brne	.+12     	; 0xaa2 <__stack+0x1a3>
 a96:	23 2d       	mov	r18, r3
 a98:	2f 7e       	andi	r18, 0xEF	; 239
 a9a:	b2 2e       	mov	r11, r18
 a9c:	2a e0       	ldi	r18, 0x0A	; 10
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	25 c0       	rjmp	.+74     	; 0xaec <__stack+0x1ed>
 aa2:	93 2d       	mov	r25, r3
 aa4:	99 7f       	andi	r25, 0xF9	; 249
 aa6:	b9 2e       	mov	r11, r25
 aa8:	8f 36       	cpi	r24, 0x6F	; 111
 aaa:	c1 f0       	breq	.+48     	; 0xadc <__stack+0x1dd>
 aac:	18 f4       	brcc	.+6      	; 0xab4 <__stack+0x1b5>
 aae:	88 35       	cpi	r24, 0x58	; 88
 ab0:	79 f0       	breq	.+30     	; 0xad0 <__stack+0x1d1>
 ab2:	b5 c0       	rjmp	.+362    	; 0xc1e <__stack+0x31f>
 ab4:	80 37       	cpi	r24, 0x70	; 112
 ab6:	19 f0       	breq	.+6      	; 0xabe <__stack+0x1bf>
 ab8:	88 37       	cpi	r24, 0x78	; 120
 aba:	21 f0       	breq	.+8      	; 0xac4 <__stack+0x1c5>
 abc:	b0 c0       	rjmp	.+352    	; 0xc1e <__stack+0x31f>
 abe:	e9 2f       	mov	r30, r25
 ac0:	e0 61       	ori	r30, 0x10	; 16
 ac2:	be 2e       	mov	r11, r30
 ac4:	b4 fe       	sbrs	r11, 4
 ac6:	0d c0       	rjmp	.+26     	; 0xae2 <__stack+0x1e3>
 ac8:	fb 2d       	mov	r31, r11
 aca:	f4 60       	ori	r31, 0x04	; 4
 acc:	bf 2e       	mov	r11, r31
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <__stack+0x1e3>
 ad0:	34 fe       	sbrs	r3, 4
 ad2:	0a c0       	rjmp	.+20     	; 0xae8 <__stack+0x1e9>
 ad4:	29 2f       	mov	r18, r25
 ad6:	26 60       	ori	r18, 0x06	; 6
 ad8:	b2 2e       	mov	r11, r18
 ada:	06 c0       	rjmp	.+12     	; 0xae8 <__stack+0x1e9>
 adc:	28 e0       	ldi	r18, 0x08	; 8
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	05 c0       	rjmp	.+10     	; 0xaec <__stack+0x1ed>
 ae2:	20 e1       	ldi	r18, 0x10	; 16
 ae4:	30 e0       	ldi	r19, 0x00	; 0
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <__stack+0x1ed>
 ae8:	20 e1       	ldi	r18, 0x10	; 16
 aea:	32 e0       	ldi	r19, 0x02	; 2
 aec:	f8 01       	movw	r30, r16
 aee:	b7 fe       	sbrs	r11, 7
 af0:	07 c0       	rjmp	.+14     	; 0xb00 <__stack+0x201>
 af2:	60 81       	ld	r22, Z
 af4:	71 81       	ldd	r23, Z+1	; 0x01
 af6:	82 81       	ldd	r24, Z+2	; 0x02
 af8:	93 81       	ldd	r25, Z+3	; 0x03
 afa:	0c 5f       	subi	r16, 0xFC	; 252
 afc:	1f 4f       	sbci	r17, 0xFF	; 255
 afe:	06 c0       	rjmp	.+12     	; 0xb0c <__stack+0x20d>
 b00:	60 81       	ld	r22, Z
 b02:	71 81       	ldd	r23, Z+1	; 0x01
 b04:	80 e0       	ldi	r24, 0x00	; 0
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 5f       	subi	r16, 0xFE	; 254
 b0a:	1f 4f       	sbci	r17, 0xFF	; 255
 b0c:	a3 01       	movw	r20, r6
 b0e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__ultoa_invert>
 b12:	88 2e       	mov	r8, r24
 b14:	86 18       	sub	r8, r6
 b16:	fb 2d       	mov	r31, r11
 b18:	ff 77       	andi	r31, 0x7F	; 127
 b1a:	3f 2e       	mov	r3, r31
 b1c:	36 fe       	sbrs	r3, 6
 b1e:	0d c0       	rjmp	.+26     	; 0xb3a <__stack+0x23b>
 b20:	23 2d       	mov	r18, r3
 b22:	2e 7f       	andi	r18, 0xFE	; 254
 b24:	a2 2e       	mov	r10, r18
 b26:	89 14       	cp	r8, r9
 b28:	58 f4       	brcc	.+22     	; 0xb40 <__stack+0x241>
 b2a:	34 fe       	sbrs	r3, 4
 b2c:	0b c0       	rjmp	.+22     	; 0xb44 <__stack+0x245>
 b2e:	32 fc       	sbrc	r3, 2
 b30:	09 c0       	rjmp	.+18     	; 0xb44 <__stack+0x245>
 b32:	83 2d       	mov	r24, r3
 b34:	8e 7e       	andi	r24, 0xEE	; 238
 b36:	a8 2e       	mov	r10, r24
 b38:	05 c0       	rjmp	.+10     	; 0xb44 <__stack+0x245>
 b3a:	b8 2c       	mov	r11, r8
 b3c:	a3 2c       	mov	r10, r3
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <__stack+0x247>
 b40:	b8 2c       	mov	r11, r8
 b42:	01 c0       	rjmp	.+2      	; 0xb46 <__stack+0x247>
 b44:	b9 2c       	mov	r11, r9
 b46:	a4 fe       	sbrs	r10, 4
 b48:	0f c0       	rjmp	.+30     	; 0xb68 <__stack+0x269>
 b4a:	fe 01       	movw	r30, r28
 b4c:	e8 0d       	add	r30, r8
 b4e:	f1 1d       	adc	r31, r1
 b50:	80 81       	ld	r24, Z
 b52:	80 33       	cpi	r24, 0x30	; 48
 b54:	21 f4       	brne	.+8      	; 0xb5e <__stack+0x25f>
 b56:	9a 2d       	mov	r25, r10
 b58:	99 7e       	andi	r25, 0xE9	; 233
 b5a:	a9 2e       	mov	r10, r25
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <__stack+0x271>
 b5e:	a2 fe       	sbrs	r10, 2
 b60:	06 c0       	rjmp	.+12     	; 0xb6e <__stack+0x26f>
 b62:	b3 94       	inc	r11
 b64:	b3 94       	inc	r11
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <__stack+0x271>
 b68:	8a 2d       	mov	r24, r10
 b6a:	86 78       	andi	r24, 0x86	; 134
 b6c:	09 f0       	breq	.+2      	; 0xb70 <__stack+0x271>
 b6e:	b3 94       	inc	r11
 b70:	a3 fc       	sbrc	r10, 3
 b72:	11 c0       	rjmp	.+34     	; 0xb96 <__stack+0x297>
 b74:	a0 fe       	sbrs	r10, 0
 b76:	06 c0       	rjmp	.+12     	; 0xb84 <__stack+0x285>
 b78:	b2 14       	cp	r11, r2
 b7a:	88 f4       	brcc	.+34     	; 0xb9e <__stack+0x29f>
 b7c:	28 0c       	add	r2, r8
 b7e:	92 2c       	mov	r9, r2
 b80:	9b 18       	sub	r9, r11
 b82:	0e c0       	rjmp	.+28     	; 0xba0 <__stack+0x2a1>
 b84:	b2 14       	cp	r11, r2
 b86:	60 f4       	brcc	.+24     	; 0xba0 <__stack+0x2a1>
 b88:	b6 01       	movw	r22, r12
 b8a:	80 e2       	ldi	r24, 0x20	; 32
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 b92:	b3 94       	inc	r11
 b94:	f7 cf       	rjmp	.-18     	; 0xb84 <__stack+0x285>
 b96:	b2 14       	cp	r11, r2
 b98:	18 f4       	brcc	.+6      	; 0xba0 <__stack+0x2a1>
 b9a:	2b 18       	sub	r2, r11
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <__stack+0x2a3>
 b9e:	98 2c       	mov	r9, r8
 ba0:	21 2c       	mov	r2, r1
 ba2:	a4 fe       	sbrs	r10, 4
 ba4:	10 c0       	rjmp	.+32     	; 0xbc6 <__stack+0x2c7>
 ba6:	b6 01       	movw	r22, r12
 ba8:	80 e3       	ldi	r24, 0x30	; 48
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 bb0:	a2 fe       	sbrs	r10, 2
 bb2:	17 c0       	rjmp	.+46     	; 0xbe2 <__stack+0x2e3>
 bb4:	a1 fc       	sbrc	r10, 1
 bb6:	03 c0       	rjmp	.+6      	; 0xbbe <__stack+0x2bf>
 bb8:	88 e7       	ldi	r24, 0x78	; 120
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <__stack+0x2c3>
 bbe:	88 e5       	ldi	r24, 0x58	; 88
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	b6 01       	movw	r22, r12
 bc4:	0c c0       	rjmp	.+24     	; 0xbde <__stack+0x2df>
 bc6:	8a 2d       	mov	r24, r10
 bc8:	86 78       	andi	r24, 0x86	; 134
 bca:	59 f0       	breq	.+22     	; 0xbe2 <__stack+0x2e3>
 bcc:	a1 fe       	sbrs	r10, 1
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__stack+0x2d5>
 bd0:	8b e2       	ldi	r24, 0x2B	; 43
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <__stack+0x2d7>
 bd4:	80 e2       	ldi	r24, 0x20	; 32
 bd6:	a7 fc       	sbrc	r10, 7
 bd8:	8d e2       	ldi	r24, 0x2D	; 45
 bda:	b6 01       	movw	r22, r12
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 be2:	89 14       	cp	r8, r9
 be4:	38 f4       	brcc	.+14     	; 0xbf4 <__stack+0x2f5>
 be6:	b6 01       	movw	r22, r12
 be8:	80 e3       	ldi	r24, 0x30	; 48
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 bf0:	9a 94       	dec	r9
 bf2:	f7 cf       	rjmp	.-18     	; 0xbe2 <__stack+0x2e3>
 bf4:	8a 94       	dec	r8
 bf6:	f3 01       	movw	r30, r6
 bf8:	e8 0d       	add	r30, r8
 bfa:	f1 1d       	adc	r31, r1
 bfc:	80 81       	ld	r24, Z
 bfe:	b6 01       	movw	r22, r12
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 c06:	81 10       	cpse	r8, r1
 c08:	f5 cf       	rjmp	.-22     	; 0xbf4 <__stack+0x2f5>
 c0a:	22 20       	and	r2, r2
 c0c:	09 f4       	brne	.+2      	; 0xc10 <__stack+0x311>
 c0e:	42 ce       	rjmp	.-892    	; 0x894 <vfprintf+0x24>
 c10:	b6 01       	movw	r22, r12
 c12:	80 e2       	ldi	r24, 0x20	; 32
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 c1a:	2a 94       	dec	r2
 c1c:	f6 cf       	rjmp	.-20     	; 0xc0a <__stack+0x30b>
 c1e:	f6 01       	movw	r30, r12
 c20:	86 81       	ldd	r24, Z+6	; 0x06
 c22:	97 81       	ldd	r25, Z+7	; 0x07
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <__stack+0x32b>
 c26:	8f ef       	ldi	r24, 0xFF	; 255
 c28:	9f ef       	ldi	r25, 0xFF	; 255
 c2a:	2b 96       	adiw	r28, 0x0b	; 11
 c2c:	e2 e1       	ldi	r30, 0x12	; 18
 c2e:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__epilogue_restores__>

00000c32 <strnlen_P>:
 c32:	fc 01       	movw	r30, r24
 c34:	05 90       	lpm	r0, Z+
 c36:	61 50       	subi	r22, 0x01	; 1
 c38:	70 40       	sbci	r23, 0x00	; 0
 c3a:	01 10       	cpse	r0, r1
 c3c:	d8 f7       	brcc	.-10     	; 0xc34 <strnlen_P+0x2>
 c3e:	80 95       	com	r24
 c40:	90 95       	com	r25
 c42:	8e 0f       	add	r24, r30
 c44:	9f 1f       	adc	r25, r31
 c46:	08 95       	ret

00000c48 <strnlen>:
 c48:	fc 01       	movw	r30, r24
 c4a:	61 50       	subi	r22, 0x01	; 1
 c4c:	70 40       	sbci	r23, 0x00	; 0
 c4e:	01 90       	ld	r0, Z+
 c50:	01 10       	cpse	r0, r1
 c52:	d8 f7       	brcc	.-10     	; 0xc4a <strnlen+0x2>
 c54:	80 95       	com	r24
 c56:	90 95       	com	r25
 c58:	8e 0f       	add	r24, r30
 c5a:	9f 1f       	adc	r25, r31
 c5c:	08 95       	ret

00000c5e <fputc>:
 c5e:	0f 93       	push	r16
 c60:	1f 93       	push	r17
 c62:	cf 93       	push	r28
 c64:	df 93       	push	r29
 c66:	fb 01       	movw	r30, r22
 c68:	23 81       	ldd	r18, Z+3	; 0x03
 c6a:	21 fd       	sbrc	r18, 1
 c6c:	03 c0       	rjmp	.+6      	; 0xc74 <fputc+0x16>
 c6e:	8f ef       	ldi	r24, 0xFF	; 255
 c70:	9f ef       	ldi	r25, 0xFF	; 255
 c72:	2c c0       	rjmp	.+88     	; 0xccc <fputc+0x6e>
 c74:	22 ff       	sbrs	r18, 2
 c76:	16 c0       	rjmp	.+44     	; 0xca4 <fputc+0x46>
 c78:	46 81       	ldd	r20, Z+6	; 0x06
 c7a:	57 81       	ldd	r21, Z+7	; 0x07
 c7c:	24 81       	ldd	r18, Z+4	; 0x04
 c7e:	35 81       	ldd	r19, Z+5	; 0x05
 c80:	42 17       	cp	r20, r18
 c82:	53 07       	cpc	r21, r19
 c84:	44 f4       	brge	.+16     	; 0xc96 <fputc+0x38>
 c86:	a0 81       	ld	r26, Z
 c88:	b1 81       	ldd	r27, Z+1	; 0x01
 c8a:	9d 01       	movw	r18, r26
 c8c:	2f 5f       	subi	r18, 0xFF	; 255
 c8e:	3f 4f       	sbci	r19, 0xFF	; 255
 c90:	31 83       	std	Z+1, r19	; 0x01
 c92:	20 83       	st	Z, r18
 c94:	8c 93       	st	X, r24
 c96:	26 81       	ldd	r18, Z+6	; 0x06
 c98:	37 81       	ldd	r19, Z+7	; 0x07
 c9a:	2f 5f       	subi	r18, 0xFF	; 255
 c9c:	3f 4f       	sbci	r19, 0xFF	; 255
 c9e:	37 83       	std	Z+7, r19	; 0x07
 ca0:	26 83       	std	Z+6, r18	; 0x06
 ca2:	14 c0       	rjmp	.+40     	; 0xccc <fputc+0x6e>
 ca4:	8b 01       	movw	r16, r22
 ca6:	ec 01       	movw	r28, r24
 ca8:	fb 01       	movw	r30, r22
 caa:	00 84       	ldd	r0, Z+8	; 0x08
 cac:	f1 85       	ldd	r31, Z+9	; 0x09
 cae:	e0 2d       	mov	r30, r0
 cb0:	09 95       	icall
 cb2:	89 2b       	or	r24, r25
 cb4:	e1 f6       	brne	.-72     	; 0xc6e <fputc+0x10>
 cb6:	d8 01       	movw	r26, r16
 cb8:	16 96       	adiw	r26, 0x06	; 6
 cba:	8d 91       	ld	r24, X+
 cbc:	9c 91       	ld	r25, X
 cbe:	17 97       	sbiw	r26, 0x07	; 7
 cc0:	01 96       	adiw	r24, 0x01	; 1
 cc2:	17 96       	adiw	r26, 0x07	; 7
 cc4:	9c 93       	st	X, r25
 cc6:	8e 93       	st	-X, r24
 cc8:	16 97       	sbiw	r26, 0x06	; 6
 cca:	ce 01       	movw	r24, r28
 ccc:	df 91       	pop	r29
 cce:	cf 91       	pop	r28
 cd0:	1f 91       	pop	r17
 cd2:	0f 91       	pop	r16
 cd4:	08 95       	ret

00000cd6 <__ultoa_invert>:
 cd6:	fa 01       	movw	r30, r20
 cd8:	aa 27       	eor	r26, r26
 cda:	28 30       	cpi	r18, 0x08	; 8
 cdc:	51 f1       	breq	.+84     	; 0xd32 <__ultoa_invert+0x5c>
 cde:	20 31       	cpi	r18, 0x10	; 16
 ce0:	81 f1       	breq	.+96     	; 0xd42 <__ultoa_invert+0x6c>
 ce2:	e8 94       	clt
 ce4:	6f 93       	push	r22
 ce6:	6e 7f       	andi	r22, 0xFE	; 254
 ce8:	6e 5f       	subi	r22, 0xFE	; 254
 cea:	7f 4f       	sbci	r23, 0xFF	; 255
 cec:	8f 4f       	sbci	r24, 0xFF	; 255
 cee:	9f 4f       	sbci	r25, 0xFF	; 255
 cf0:	af 4f       	sbci	r26, 0xFF	; 255
 cf2:	b1 e0       	ldi	r27, 0x01	; 1
 cf4:	3e d0       	rcall	.+124    	; 0xd72 <__ultoa_invert+0x9c>
 cf6:	b4 e0       	ldi	r27, 0x04	; 4
 cf8:	3c d0       	rcall	.+120    	; 0xd72 <__ultoa_invert+0x9c>
 cfa:	67 0f       	add	r22, r23
 cfc:	78 1f       	adc	r23, r24
 cfe:	89 1f       	adc	r24, r25
 d00:	9a 1f       	adc	r25, r26
 d02:	a1 1d       	adc	r26, r1
 d04:	68 0f       	add	r22, r24
 d06:	79 1f       	adc	r23, r25
 d08:	8a 1f       	adc	r24, r26
 d0a:	91 1d       	adc	r25, r1
 d0c:	a1 1d       	adc	r26, r1
 d0e:	6a 0f       	add	r22, r26
 d10:	71 1d       	adc	r23, r1
 d12:	81 1d       	adc	r24, r1
 d14:	91 1d       	adc	r25, r1
 d16:	a1 1d       	adc	r26, r1
 d18:	20 d0       	rcall	.+64     	; 0xd5a <__ultoa_invert+0x84>
 d1a:	09 f4       	brne	.+2      	; 0xd1e <__ultoa_invert+0x48>
 d1c:	68 94       	set
 d1e:	3f 91       	pop	r19
 d20:	2a e0       	ldi	r18, 0x0A	; 10
 d22:	26 9f       	mul	r18, r22
 d24:	11 24       	eor	r1, r1
 d26:	30 19       	sub	r19, r0
 d28:	30 5d       	subi	r19, 0xD0	; 208
 d2a:	31 93       	st	Z+, r19
 d2c:	de f6       	brtc	.-74     	; 0xce4 <__ultoa_invert+0xe>
 d2e:	cf 01       	movw	r24, r30
 d30:	08 95       	ret
 d32:	46 2f       	mov	r20, r22
 d34:	47 70       	andi	r20, 0x07	; 7
 d36:	40 5d       	subi	r20, 0xD0	; 208
 d38:	41 93       	st	Z+, r20
 d3a:	b3 e0       	ldi	r27, 0x03	; 3
 d3c:	0f d0       	rcall	.+30     	; 0xd5c <__ultoa_invert+0x86>
 d3e:	c9 f7       	brne	.-14     	; 0xd32 <__ultoa_invert+0x5c>
 d40:	f6 cf       	rjmp	.-20     	; 0xd2e <__ultoa_invert+0x58>
 d42:	46 2f       	mov	r20, r22
 d44:	4f 70       	andi	r20, 0x0F	; 15
 d46:	40 5d       	subi	r20, 0xD0	; 208
 d48:	4a 33       	cpi	r20, 0x3A	; 58
 d4a:	18 f0       	brcs	.+6      	; 0xd52 <__ultoa_invert+0x7c>
 d4c:	49 5d       	subi	r20, 0xD9	; 217
 d4e:	31 fd       	sbrc	r19, 1
 d50:	40 52       	subi	r20, 0x20	; 32
 d52:	41 93       	st	Z+, r20
 d54:	02 d0       	rcall	.+4      	; 0xd5a <__ultoa_invert+0x84>
 d56:	a9 f7       	brne	.-22     	; 0xd42 <__ultoa_invert+0x6c>
 d58:	ea cf       	rjmp	.-44     	; 0xd2e <__ultoa_invert+0x58>
 d5a:	b4 e0       	ldi	r27, 0x04	; 4
 d5c:	a6 95       	lsr	r26
 d5e:	97 95       	ror	r25
 d60:	87 95       	ror	r24
 d62:	77 95       	ror	r23
 d64:	67 95       	ror	r22
 d66:	ba 95       	dec	r27
 d68:	c9 f7       	brne	.-14     	; 0xd5c <__ultoa_invert+0x86>
 d6a:	00 97       	sbiw	r24, 0x00	; 0
 d6c:	61 05       	cpc	r22, r1
 d6e:	71 05       	cpc	r23, r1
 d70:	08 95       	ret
 d72:	9b 01       	movw	r18, r22
 d74:	ac 01       	movw	r20, r24
 d76:	0a 2e       	mov	r0, r26
 d78:	06 94       	lsr	r0
 d7a:	57 95       	ror	r21
 d7c:	47 95       	ror	r20
 d7e:	37 95       	ror	r19
 d80:	27 95       	ror	r18
 d82:	ba 95       	dec	r27
 d84:	c9 f7       	brne	.-14     	; 0xd78 <__ultoa_invert+0xa2>
 d86:	62 0f       	add	r22, r18
 d88:	73 1f       	adc	r23, r19
 d8a:	84 1f       	adc	r24, r20
 d8c:	95 1f       	adc	r25, r21
 d8e:	a0 1d       	adc	r26, r0
 d90:	08 95       	ret

00000d92 <__prologue_saves__>:
 d92:	2f 92       	push	r2
 d94:	3f 92       	push	r3
 d96:	4f 92       	push	r4
 d98:	5f 92       	push	r5
 d9a:	6f 92       	push	r6
 d9c:	7f 92       	push	r7
 d9e:	8f 92       	push	r8
 da0:	9f 92       	push	r9
 da2:	af 92       	push	r10
 da4:	bf 92       	push	r11
 da6:	cf 92       	push	r12
 da8:	df 92       	push	r13
 daa:	ef 92       	push	r14
 dac:	ff 92       	push	r15
 dae:	0f 93       	push	r16
 db0:	1f 93       	push	r17
 db2:	cf 93       	push	r28
 db4:	df 93       	push	r29
 db6:	cd b7       	in	r28, 0x3d	; 61
 db8:	de b7       	in	r29, 0x3e	; 62
 dba:	ca 1b       	sub	r28, r26
 dbc:	db 0b       	sbc	r29, r27
 dbe:	0f b6       	in	r0, 0x3f	; 63
 dc0:	f8 94       	cli
 dc2:	de bf       	out	0x3e, r29	; 62
 dc4:	0f be       	out	0x3f, r0	; 63
 dc6:	cd bf       	out	0x3d, r28	; 61
 dc8:	09 94       	ijmp

00000dca <__epilogue_restores__>:
 dca:	2a 88       	ldd	r2, Y+18	; 0x12
 dcc:	39 88       	ldd	r3, Y+17	; 0x11
 dce:	48 88       	ldd	r4, Y+16	; 0x10
 dd0:	5f 84       	ldd	r5, Y+15	; 0x0f
 dd2:	6e 84       	ldd	r6, Y+14	; 0x0e
 dd4:	7d 84       	ldd	r7, Y+13	; 0x0d
 dd6:	8c 84       	ldd	r8, Y+12	; 0x0c
 dd8:	9b 84       	ldd	r9, Y+11	; 0x0b
 dda:	aa 84       	ldd	r10, Y+10	; 0x0a
 ddc:	b9 84       	ldd	r11, Y+9	; 0x09
 dde:	c8 84       	ldd	r12, Y+8	; 0x08
 de0:	df 80       	ldd	r13, Y+7	; 0x07
 de2:	ee 80       	ldd	r14, Y+6	; 0x06
 de4:	fd 80       	ldd	r15, Y+5	; 0x05
 de6:	0c 81       	ldd	r16, Y+4	; 0x04
 de8:	1b 81       	ldd	r17, Y+3	; 0x03
 dea:	aa 81       	ldd	r26, Y+2	; 0x02
 dec:	b9 81       	ldd	r27, Y+1	; 0x01
 dee:	ce 0f       	add	r28, r30
 df0:	d1 1d       	adc	r29, r1
 df2:	0f b6       	in	r0, 0x3f	; 63
 df4:	f8 94       	cli
 df6:	de bf       	out	0x3e, r29	; 62
 df8:	0f be       	out	0x3f, r0	; 63
 dfa:	cd bf       	out	0x3d, r28	; 61
 dfc:	ed 01       	movw	r28, r26
 dfe:	08 95       	ret

00000e00 <_exit>:
 e00:	f8 94       	cli

00000e02 <__stop_program>:
 e02:	ff cf       	rjmp	.-2      	; 0xe02 <__stop_program>
