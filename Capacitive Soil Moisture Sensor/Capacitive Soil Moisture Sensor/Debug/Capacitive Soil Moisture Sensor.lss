
Capacitive Soil Moisture Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000009da  00000a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  00800144  00800144  00000ab2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c41  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  00001849  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bd  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000556  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033c  00000000  00000000  00002f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000327a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_18>
  4c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3e       	cpi	r26, 0xE1	; 225
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  9e:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_adc>:
	
	// Were going to use the external AVCC reference
	/*
	 * Bit 6 : 1 - AVCC with external capacitor at AREF pin
	 */ 
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	 * Bit 1 : 1 - Prescaler
	 * Bit 0 : 1 - Prescaler
	 * (The prescaler is set to a div factor of 128
	 *
	 */
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <init_timer1>:
 * This program is to set up timer 1 as a CTC
 */
void init_timer1(void){
	
	// On board LED is connected to Pin B5
	DDRB = (1<<5);
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	84 b9       	out	0x04, r24	; 4
	// Set initial LED state to off
	LED_State = 0;
  b8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
  bc:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
	
	/* 
	 * Set Up Timer/Counter 1 to produce the interrupt
	 */
	// Set compare value
	OCR1A = 62500;
  c0:	84 e2       	ldi	r24, 0x24	; 36
  c2:	94 ef       	ldi	r25, 0xF4	; 244
  c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	/* Set Timer Compare Mode (CTC Mode)
	 *
	 * TCCR1A No bits required
	 * TCCR1B WGM12 for CTC mode, CS12 for Clk/256 (Prescaler)
	 */
	TCCR1A = 0;
  cc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<CS12);
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Enable Compare Interrupt (On output compare match)
	TIMSK1 = (1<<OCIE1A);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	// Ensure interrupt flag is cleared
	TIFR1 = (1<<OCF1A);
  dc:	86 bb       	out	0x16, r24	; 22
  de:	08 95       	ret

000000e0 <__vector_11>:
/*
 * Interrupt for Timer 1 Compare
 *
 * This Interrupt Service Routine toggles the state of the LED pin
 */ 
ISR(TIMER1_COMPA_vect) {
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25

	// Use a switch statement for the LED state (This keeps the ISR as short as possible).
	switch (LED_State) {
  ee:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
  f2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
  f6:	00 97       	sbiw	r24, 0x00	; 0
  f8:	19 f0       	breq	.+6      	; 0x100 <__vector_11+0x20>
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	51 f0       	breq	.+20     	; 0x112 <__vector_11+0x32>
  fe:	0e c0       	rjmp	.+28     	; 0x11c <__vector_11+0x3c>
		// If LED off turn on
		case 0:
			PORTB = (1<<5);
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	85 b9       	out	0x05, r24	; 5
			LED_State = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
 10c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
			break;
 110:	05 c0       	rjmp	.+10     	; 0x11c <__vector_11+0x3c>
		// If LED on turn off
		case 1:
			PORTB = (0<<5);
 112:	15 b8       	out	0x05, r1	; 5
			LED_State = 0;
 114:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
 118:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
			break;
	}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <ADC_Read_Value>:
static uint16_t ADC_Read_Value(void){
	// Create Variable for raw ADC value
	uint16_t value;
	
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
	
	// Wait until conversion finished
	while(ADCSRA & (1<<ADSC)) {
 134:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 138:	86 fd       	sbrc	r24, 6
 13a:	fc cf       	rjmp	.-8      	; 0x134 <ADC_Read_Value+0xa>
		;
	}
	
	// Set the raw value to the ADC output	
	value = ADC;
 13c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 140:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	// Return the raw value
	return value;
}
 144:	08 95       	ret

00000146 <para_scaling>:
 * A function for para scaling the raw ADC value to a percentage
 */
static uint16_t para_scaling(uint16_t raw_value){
	uint16_t engineering_value;
	
	engineering_value = ((1/(raw_value^4)) * 136200000000);
 146:	bc 01       	movw	r22, r24
 148:	24 e0       	ldi	r18, 0x04	; 4
 14a:	62 27       	eor	r22, r18
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <__udivmodhi4>
	
	return engineering_value;
}
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	92 e1       	ldi	r25, 0x12	; 18
 158:	9c 01       	movw	r18, r24
 15a:	62 9f       	mul	r22, r18
 15c:	c0 01       	movw	r24, r0
 15e:	63 9f       	mul	r22, r19
 160:	90 0d       	add	r25, r0
 162:	72 9f       	mul	r23, r18
 164:	90 0d       	add	r25, r0
 166:	11 24       	eor	r1, r1
 168:	08 95       	ret

0000016a <main>:
	// Create Variable for ADC value
	uint16_t ADC_value;
	uint16_t moisture_percentage;
	
	// Enable Timer 1 for heartbeat LEd
	init_timer1();
 16a:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_timer1>
	
	// Set UART
	init_uart();
 16e:	0e 94 4c 01 	call	0x298	; 0x298 <init_uart>
	
	// Initialize the ADC
	init_adc();
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <init_adc>
	
	// Turn on global interrupts
	sei();
 176:	78 94       	sei
	
    // Application Code
    while (1) {
		
		// Read the ADC value
		ADC_value = ADC_Read_Value();
 178:	0e 94 95 00 	call	0x12a	; 0x12a <ADC_Read_Value>
 17c:	d8 2f       	mov	r29, r24
 17e:	c9 2f       	mov	r28, r25
		
		// Print the value to the serial window
		printf("The raw value is %3d\n", ADC_value);
 180:	9f 93       	push	r25
 182:	8f 93       	push	r24
 184:	8e e0       	ldi	r24, 0x0E	; 14
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	9f 93       	push	r25
 18a:	8f 93       	push	r24
 18c:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
		moisture_percentage = para_scaling(ADC_value);
 190:	8d 2f       	mov	r24, r29
 192:	9c 2f       	mov	r25, r28
 194:	0e 94 a3 00 	call	0x146	; 0x146 <para_scaling>
		printf("The percentage value is %u %% \n", moisture_percentage);
 198:	9f 93       	push	r25
 19a:	8f 93       	push	r24
 19c:	84 e2       	ldi	r24, 0x24	; 36
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	9f 93       	push	r25
 1a2:	8f 93       	push	r24
 1a4:	0e 94 0d 02 	call	0x41a	; 0x41a <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	89 e6       	ldi	r24, 0x69	; 105
 1ac:	98 e1       	ldi	r25, 0x18	; 24
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x44>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x4e>
 1b8:	00 00       	nop
 1ba:	8d b7       	in	r24, 0x3d	; 61
 1bc:	9e b7       	in	r25, 0x3e	; 62
 1be:	08 96       	adiw	r24, 0x08	; 8
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	9e bf       	out	0x3e, r25	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	8d bf       	out	0x3d, r24	; 61
 1ca:	d6 cf       	rjmp	.-84     	; 0x178 <main+0xe>

000001cc <uart_put_char>:
}

/*
 * A function for putting characters in the buffer
 */
static int uart_put_char(char c, FILE* stream) {
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
 1d0:	8a 30       	cpi	r24, 0x0A	; 10
 1d2:	19 f4       	brne	.+6      	; 0x1da <uart_put_char+0xe>
		uart_put_char('\r', stream);
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
 1da:	9f b7       	in	r25, 0x3f	; 63
 1dc:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <uart_put_char+0x18>
		if(!interrupts_enabled) {
 1e0:	99 23       	and	r25, r25
 1e2:	29 f1       	breq	.+74     	; 0x22e <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
 1e4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
 1e8:	88 23       	and	r24, r24
 1ea:	d4 f3       	brlt	.-12     	; 0x1e0 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
 1ec:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
 1ee:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <out_insert_pos>
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	8e 0f       	add	r24, r30
 1f6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <out_insert_pos>
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	e8 5b       	subi	r30, 0xB8	; 184
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
 202:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
 20c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <out_insert_pos>
 210:	80 38       	cpi	r24, 0x80	; 128
 212:	11 f4       	brne	.+4      	; 0x218 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
 214:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
 218:	e1 ec       	ldi	r30, 0xC1	; 193
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	80 62       	ori	r24, 0x20	; 32
 220:	80 83       	st	Z, r24
	if(interrupts_enabled) {
 222:	99 23       	and	r25, r25
 224:	39 f0       	breq	.+14     	; 0x234 <uart_put_char+0x68>
		sei();
 226:	78 94       	sei
	}
	return 0;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	05 c0       	rjmp	.+10     	; 0x238 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <uart_put_char+0x6c>
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <uart_get_char>:
/*
 * A function for getting characters from the buffer
 */
int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
 23c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <bytes_in_input_buffer>
 240:	88 23       	and	r24, r24
 242:	e1 f3       	breq	.-8      	; 0x23c <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
 244:	2f b7       	in	r18, 0x3f	; 63
 246:	20 78       	andi	r18, 0x80	; 128
	cli();
 248:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
 24a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <input_insert_pos>
 24e:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <bytes_in_input_buffer>
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	83 1b       	sub	r24, r19
 256:	91 09       	sbc	r25, r1
 258:	5a f4       	brpl	.+22     	; 0x270 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
 25a:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <input_insert_pos>
 25e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <bytes_in_input_buffer>
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	e8 1b       	sub	r30, r24
 266:	f1 09       	sbc	r31, r1
 268:	e7 52       	subi	r30, 0x27	; 39
 26a:	fe 4f       	sbci	r31, 0xFE	; 254
 26c:	80 81       	ld	r24, Z
 26e:	0a c0       	rjmp	.+20     	; 0x284 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
 270:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <input_insert_pos>
 274:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <bytes_in_input_buffer>
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	e8 1b       	sub	r30, r24
 27c:	f1 09       	sbc	r31, r1
 27e:	e7 53       	subi	r30, 0x37	; 55
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
 284:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <bytes_in_input_buffer>
 288:	91 50       	subi	r25, 0x01	; 1
 28a:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <bytes_in_input_buffer>
	if(interrupts_enabled) {
 28e:	22 23       	and	r18, r18
 290:	09 f0       	breq	.+2      	; 0x294 <uart_get_char+0x58>
		sei();
 292:	78 94       	sei
	}	
	return c;
}
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	08 95       	ret

00000298 <init_uart>:
 * A function for initializing UART communication
 */
void init_uart(void){
	
	// Set the baud rate to 19200
	UBRR0 = 51;
 298:	83 e3       	ldi	r24, 0x33	; 51
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Initialize our buffers
	out_insert_pos = 0;
 2a4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <out_insert_pos>
	bytes_in_out_buffer = 0;
 2a8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <bytes_in_out_buffer>
	input_insert_pos = 0;
 2ac:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <input_insert_pos>
	bytes_in_input_buffer = 0;
 2b0:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <bytes_in_input_buffer>
	input_overrun = 0;
 2b4:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <input_overrun>
	 * Enable the following bits
	 * Bit 3 - TXEN0 - Transmit Enable
	 * Bit 4 - RXEN0 - Receive Enable
	 * Bit 7 - RXCIE0 - Receive Complete Interrupt
	 */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2b8:	88 e9       	ldi	r24, 0x98	; 152
 2ba:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	stdout = &myStream;
 2be:	eb ed       	ldi	r30, 0xDB	; 219
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	93 83       	std	Z+3, r25	; 0x03
 2c8:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
 2ca:	91 83       	std	Z+1, r25	; 0x01
 2cc:	80 83       	st	Z, r24
 2ce:	08 95       	ret

000002d0 <__vector_19>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART_UDRE_vect) 
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
 2e4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
 2e8:	88 23       	and	r24, r24
 2ea:	29 f1       	breq	.+74     	; 0x336 <__vector_19+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
 2ec:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <out_insert_pos>
 2f0:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <bytes_in_out_buffer>
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	82 1b       	sub	r24, r18
 2f8:	91 09       	sbc	r25, r1
 2fa:	5a f4       	brpl	.+22     	; 0x312 <__vector_19+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
 2fc:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <out_insert_pos>
 300:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	e8 1b       	sub	r30, r24
 308:	f1 09       	sbc	r31, r1
 30a:	e8 53       	subi	r30, 0x38	; 56
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	90 81       	ld	r25, Z
 310:	0a c0       	rjmp	.+20     	; 0x326 <__vector_19+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 312:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <out_insert_pos>
 316:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	e8 1b       	sub	r30, r24
 31e:	f1 09       	sbc	r31, r1
 320:	e8 5b       	subi	r30, 0xB8	; 184
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
 326:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
 32a:	81 50       	subi	r24, 0x01	; 1
 32c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
 330:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 334:	05 c0       	rjmp	.+10     	; 0x340 <__vector_19+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
 336:	e1 ec       	ldi	r30, 0xC1	; 193
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	8f 7d       	andi	r24, 0xDF	; 223
 33e:	80 83       	st	Z, r24
	}
}
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_18>:
 * Define the interrupt handler for UART Receive Complete (i.e. 
 * we can read a character. The character is read and placed in
 * the input buffer.
 */
ISR(USART_RX_vect) 
{	
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	4f 93       	push	r20
 364:	5f 93       	push	r21
 366:	6f 93       	push	r22
 368:	7f 93       	push	r23
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
 372:	cf 93       	push	r28
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
	/* Read the character */
	char c;
	c = UDR0;
 378:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 37c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <bytes_in_out_buffer>
 380:	88 23       	and	r24, r24
 382:	2c f0       	brlt	.+10     	; 0x38e <__vector_18+0x3a>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	8c 2f       	mov	r24, r28
 38a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 38e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <bytes_in_input_buffer>
 392:	80 31       	cpi	r24, 0x10	; 16
 394:	20 f0       	brcs	.+8      	; 0x39e <__vector_18+0x4a>
		input_overrun = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <input_overrun>
 39c:	18 c0       	rjmp	.+48     	; 0x3ce <__vector_18+0x7a>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
 39e:	cd 30       	cpi	r28, 0x0D	; 13
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <__vector_18+0x50>
			c = '\n';
 3a2:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
 3a4:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <input_insert_pos>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	8e 0f       	add	r24, r30
 3ac:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <input_insert_pos>
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	e7 53       	subi	r30, 0x37	; 55
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
 3b8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <bytes_in_input_buffer>
 3bc:	8f 5f       	subi	r24, 0xFF	; 255
 3be:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
 3c2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <input_insert_pos>
 3c6:	80 31       	cpi	r24, 0x10	; 16
 3c8:	11 f4       	brne	.+4      	; 0x3ce <__vector_18+0x7a>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
 3ca:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <input_insert_pos>
		}
	}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	cf 91       	pop	r28
 3d4:	bf 91       	pop	r27
 3d6:	af 91       	pop	r26
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	7f 91       	pop	r23
 3de:	6f 91       	pop	r22
 3e0:	5f 91       	pop	r21
 3e2:	4f 91       	pop	r20
 3e4:	3f 91       	pop	r19
 3e6:	2f 91       	pop	r18
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <__udivmodhi4>:
 3f2:	aa 1b       	sub	r26, r26
 3f4:	bb 1b       	sub	r27, r27
 3f6:	51 e1       	ldi	r21, 0x11	; 17
 3f8:	07 c0       	rjmp	.+14     	; 0x408 <__udivmodhi4_ep>

000003fa <__udivmodhi4_loop>:
 3fa:	aa 1f       	adc	r26, r26
 3fc:	bb 1f       	adc	r27, r27
 3fe:	a6 17       	cp	r26, r22
 400:	b7 07       	cpc	r27, r23
 402:	10 f0       	brcs	.+4      	; 0x408 <__udivmodhi4_ep>
 404:	a6 1b       	sub	r26, r22
 406:	b7 0b       	sbc	r27, r23

00000408 <__udivmodhi4_ep>:
 408:	88 1f       	adc	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	5a 95       	dec	r21
 40e:	a9 f7       	brne	.-22     	; 0x3fa <__udivmodhi4_loop>
 410:	80 95       	com	r24
 412:	90 95       	com	r25
 414:	bc 01       	movw	r22, r24
 416:	cd 01       	movw	r24, r26
 418:	08 95       	ret

0000041a <printf>:
 41a:	a0 e0       	ldi	r26, 0x00	; 0
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e3 e1       	ldi	r30, 0x13	; 19
 420:	f2 e0       	ldi	r31, 0x02	; 2
 422:	0c 94 c4 04 	jmp	0x988	; 0x988 <__prologue_saves__+0x20>
 426:	ae 01       	movw	r20, r28
 428:	4b 5f       	subi	r20, 0xFB	; 251
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
 42c:	fa 01       	movw	r30, r20
 42e:	61 91       	ld	r22, Z+
 430:	71 91       	ld	r23, Z+
 432:	af 01       	movw	r20, r30
 434:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <__iob+0x2>
 438:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <__iob+0x3>
 43c:	0e 94 23 02 	call	0x446	; 0x446 <vfprintf>
 440:	e2 e0       	ldi	r30, 0x02	; 2
 442:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__epilogue_restores__+0x20>

00000446 <vfprintf>:
 446:	ab e0       	ldi	r26, 0x0B	; 11
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e9 e2       	ldi	r30, 0x29	; 41
 44c:	f2 e0       	ldi	r31, 0x02	; 2
 44e:	0c 94 b4 04 	jmp	0x968	; 0x968 <__prologue_saves__>
 452:	6c 01       	movw	r12, r24
 454:	7b 01       	movw	r14, r22
 456:	8a 01       	movw	r16, r20
 458:	fc 01       	movw	r30, r24
 45a:	17 82       	std	Z+7, r1	; 0x07
 45c:	16 82       	std	Z+6, r1	; 0x06
 45e:	83 81       	ldd	r24, Z+3	; 0x03
 460:	81 ff       	sbrs	r24, 1
 462:	cc c1       	rjmp	.+920    	; 0x7fc <vfprintf+0x3b6>
 464:	ce 01       	movw	r24, r28
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	3c 01       	movw	r6, r24
 46a:	f6 01       	movw	r30, r12
 46c:	93 81       	ldd	r25, Z+3	; 0x03
 46e:	f7 01       	movw	r30, r14
 470:	93 fd       	sbrc	r25, 3
 472:	85 91       	lpm	r24, Z+
 474:	93 ff       	sbrs	r25, 3
 476:	81 91       	ld	r24, Z+
 478:	7f 01       	movw	r14, r30
 47a:	88 23       	and	r24, r24
 47c:	09 f4       	brne	.+2      	; 0x480 <vfprintf+0x3a>
 47e:	ba c1       	rjmp	.+884    	; 0x7f4 <vfprintf+0x3ae>
 480:	85 32       	cpi	r24, 0x25	; 37
 482:	39 f4       	brne	.+14     	; 0x492 <vfprintf+0x4c>
 484:	93 fd       	sbrc	r25, 3
 486:	85 91       	lpm	r24, Z+
 488:	93 ff       	sbrs	r25, 3
 48a:	81 91       	ld	r24, Z+
 48c:	7f 01       	movw	r14, r30
 48e:	85 32       	cpi	r24, 0x25	; 37
 490:	29 f4       	brne	.+10     	; 0x49c <vfprintf+0x56>
 492:	b6 01       	movw	r22, r12
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 49a:	e7 cf       	rjmp	.-50     	; 0x46a <vfprintf+0x24>
 49c:	91 2c       	mov	r9, r1
 49e:	21 2c       	mov	r2, r1
 4a0:	31 2c       	mov	r3, r1
 4a2:	ff e1       	ldi	r31, 0x1F	; 31
 4a4:	f3 15       	cp	r31, r3
 4a6:	d8 f0       	brcs	.+54     	; 0x4de <vfprintf+0x98>
 4a8:	8b 32       	cpi	r24, 0x2B	; 43
 4aa:	79 f0       	breq	.+30     	; 0x4ca <vfprintf+0x84>
 4ac:	38 f4       	brcc	.+14     	; 0x4bc <vfprintf+0x76>
 4ae:	80 32       	cpi	r24, 0x20	; 32
 4b0:	79 f0       	breq	.+30     	; 0x4d0 <vfprintf+0x8a>
 4b2:	83 32       	cpi	r24, 0x23	; 35
 4b4:	a1 f4       	brne	.+40     	; 0x4de <vfprintf+0x98>
 4b6:	23 2d       	mov	r18, r3
 4b8:	20 61       	ori	r18, 0x10	; 16
 4ba:	1d c0       	rjmp	.+58     	; 0x4f6 <vfprintf+0xb0>
 4bc:	8d 32       	cpi	r24, 0x2D	; 45
 4be:	61 f0       	breq	.+24     	; 0x4d8 <vfprintf+0x92>
 4c0:	80 33       	cpi	r24, 0x30	; 48
 4c2:	69 f4       	brne	.+26     	; 0x4de <vfprintf+0x98>
 4c4:	23 2d       	mov	r18, r3
 4c6:	21 60       	ori	r18, 0x01	; 1
 4c8:	16 c0       	rjmp	.+44     	; 0x4f6 <vfprintf+0xb0>
 4ca:	83 2d       	mov	r24, r3
 4cc:	82 60       	ori	r24, 0x02	; 2
 4ce:	38 2e       	mov	r3, r24
 4d0:	e3 2d       	mov	r30, r3
 4d2:	e4 60       	ori	r30, 0x04	; 4
 4d4:	3e 2e       	mov	r3, r30
 4d6:	2a c0       	rjmp	.+84     	; 0x52c <vfprintf+0xe6>
 4d8:	f3 2d       	mov	r31, r3
 4da:	f8 60       	ori	r31, 0x08	; 8
 4dc:	1d c0       	rjmp	.+58     	; 0x518 <vfprintf+0xd2>
 4de:	37 fc       	sbrc	r3, 7
 4e0:	2d c0       	rjmp	.+90     	; 0x53c <vfprintf+0xf6>
 4e2:	20 ed       	ldi	r18, 0xD0	; 208
 4e4:	28 0f       	add	r18, r24
 4e6:	2a 30       	cpi	r18, 0x0A	; 10
 4e8:	40 f0       	brcs	.+16     	; 0x4fa <vfprintf+0xb4>
 4ea:	8e 32       	cpi	r24, 0x2E	; 46
 4ec:	b9 f4       	brne	.+46     	; 0x51c <vfprintf+0xd6>
 4ee:	36 fc       	sbrc	r3, 6
 4f0:	81 c1       	rjmp	.+770    	; 0x7f4 <vfprintf+0x3ae>
 4f2:	23 2d       	mov	r18, r3
 4f4:	20 64       	ori	r18, 0x40	; 64
 4f6:	32 2e       	mov	r3, r18
 4f8:	19 c0       	rjmp	.+50     	; 0x52c <vfprintf+0xe6>
 4fa:	36 fe       	sbrs	r3, 6
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <vfprintf+0xc4>
 4fe:	8a e0       	ldi	r24, 0x0A	; 10
 500:	98 9e       	mul	r9, r24
 502:	20 0d       	add	r18, r0
 504:	11 24       	eor	r1, r1
 506:	92 2e       	mov	r9, r18
 508:	11 c0       	rjmp	.+34     	; 0x52c <vfprintf+0xe6>
 50a:	ea e0       	ldi	r30, 0x0A	; 10
 50c:	2e 9e       	mul	r2, r30
 50e:	20 0d       	add	r18, r0
 510:	11 24       	eor	r1, r1
 512:	22 2e       	mov	r2, r18
 514:	f3 2d       	mov	r31, r3
 516:	f0 62       	ori	r31, 0x20	; 32
 518:	3f 2e       	mov	r3, r31
 51a:	08 c0       	rjmp	.+16     	; 0x52c <vfprintf+0xe6>
 51c:	8c 36       	cpi	r24, 0x6C	; 108
 51e:	21 f4       	brne	.+8      	; 0x528 <vfprintf+0xe2>
 520:	83 2d       	mov	r24, r3
 522:	80 68       	ori	r24, 0x80	; 128
 524:	38 2e       	mov	r3, r24
 526:	02 c0       	rjmp	.+4      	; 0x52c <vfprintf+0xe6>
 528:	88 36       	cpi	r24, 0x68	; 104
 52a:	41 f4       	brne	.+16     	; 0x53c <vfprintf+0xf6>
 52c:	f7 01       	movw	r30, r14
 52e:	93 fd       	sbrc	r25, 3
 530:	85 91       	lpm	r24, Z+
 532:	93 ff       	sbrs	r25, 3
 534:	81 91       	ld	r24, Z+
 536:	7f 01       	movw	r14, r30
 538:	81 11       	cpse	r24, r1
 53a:	b3 cf       	rjmp	.-154    	; 0x4a2 <vfprintf+0x5c>
 53c:	98 2f       	mov	r25, r24
 53e:	9f 7d       	andi	r25, 0xDF	; 223
 540:	95 54       	subi	r25, 0x45	; 69
 542:	93 30       	cpi	r25, 0x03	; 3
 544:	28 f4       	brcc	.+10     	; 0x550 <vfprintf+0x10a>
 546:	0c 5f       	subi	r16, 0xFC	; 252
 548:	1f 4f       	sbci	r17, 0xFF	; 255
 54a:	9f e3       	ldi	r25, 0x3F	; 63
 54c:	99 83       	std	Y+1, r25	; 0x01
 54e:	0d c0       	rjmp	.+26     	; 0x56a <vfprintf+0x124>
 550:	83 36       	cpi	r24, 0x63	; 99
 552:	31 f0       	breq	.+12     	; 0x560 <vfprintf+0x11a>
 554:	83 37       	cpi	r24, 0x73	; 115
 556:	71 f0       	breq	.+28     	; 0x574 <vfprintf+0x12e>
 558:	83 35       	cpi	r24, 0x53	; 83
 55a:	09 f0       	breq	.+2      	; 0x55e <vfprintf+0x118>
 55c:	59 c0       	rjmp	.+178    	; 0x610 <vfprintf+0x1ca>
 55e:	21 c0       	rjmp	.+66     	; 0x5a2 <vfprintf+0x15c>
 560:	f8 01       	movw	r30, r16
 562:	80 81       	ld	r24, Z
 564:	89 83       	std	Y+1, r24	; 0x01
 566:	0e 5f       	subi	r16, 0xFE	; 254
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	88 24       	eor	r8, r8
 56c:	83 94       	inc	r8
 56e:	91 2c       	mov	r9, r1
 570:	53 01       	movw	r10, r6
 572:	13 c0       	rjmp	.+38     	; 0x59a <vfprintf+0x154>
 574:	28 01       	movw	r4, r16
 576:	f2 e0       	ldi	r31, 0x02	; 2
 578:	4f 0e       	add	r4, r31
 57a:	51 1c       	adc	r5, r1
 57c:	f8 01       	movw	r30, r16
 57e:	a0 80       	ld	r10, Z
 580:	b1 80       	ldd	r11, Z+1	; 0x01
 582:	36 fe       	sbrs	r3, 6
 584:	03 c0       	rjmp	.+6      	; 0x58c <vfprintf+0x146>
 586:	69 2d       	mov	r22, r9
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <vfprintf+0x14a>
 58c:	6f ef       	ldi	r22, 0xFF	; 255
 58e:	7f ef       	ldi	r23, 0xFF	; 255
 590:	c5 01       	movw	r24, r10
 592:	0e 94 0f 04 	call	0x81e	; 0x81e <strnlen>
 596:	4c 01       	movw	r8, r24
 598:	82 01       	movw	r16, r4
 59a:	f3 2d       	mov	r31, r3
 59c:	ff 77       	andi	r31, 0x7F	; 127
 59e:	3f 2e       	mov	r3, r31
 5a0:	16 c0       	rjmp	.+44     	; 0x5ce <vfprintf+0x188>
 5a2:	28 01       	movw	r4, r16
 5a4:	22 e0       	ldi	r18, 0x02	; 2
 5a6:	42 0e       	add	r4, r18
 5a8:	51 1c       	adc	r5, r1
 5aa:	f8 01       	movw	r30, r16
 5ac:	a0 80       	ld	r10, Z
 5ae:	b1 80       	ldd	r11, Z+1	; 0x01
 5b0:	36 fe       	sbrs	r3, 6
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <vfprintf+0x174>
 5b4:	69 2d       	mov	r22, r9
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <vfprintf+0x178>
 5ba:	6f ef       	ldi	r22, 0xFF	; 255
 5bc:	7f ef       	ldi	r23, 0xFF	; 255
 5be:	c5 01       	movw	r24, r10
 5c0:	0e 94 04 04 	call	0x808	; 0x808 <strnlen_P>
 5c4:	4c 01       	movw	r8, r24
 5c6:	f3 2d       	mov	r31, r3
 5c8:	f0 68       	ori	r31, 0x80	; 128
 5ca:	3f 2e       	mov	r3, r31
 5cc:	82 01       	movw	r16, r4
 5ce:	33 fc       	sbrc	r3, 3
 5d0:	1b c0       	rjmp	.+54     	; 0x608 <vfprintf+0x1c2>
 5d2:	82 2d       	mov	r24, r2
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	88 16       	cp	r8, r24
 5d8:	99 06       	cpc	r9, r25
 5da:	b0 f4       	brcc	.+44     	; 0x608 <vfprintf+0x1c2>
 5dc:	b6 01       	movw	r22, r12
 5de:	80 e2       	ldi	r24, 0x20	; 32
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 5e6:	2a 94       	dec	r2
 5e8:	f4 cf       	rjmp	.-24     	; 0x5d2 <vfprintf+0x18c>
 5ea:	f5 01       	movw	r30, r10
 5ec:	37 fc       	sbrc	r3, 7
 5ee:	85 91       	lpm	r24, Z+
 5f0:	37 fe       	sbrs	r3, 7
 5f2:	81 91       	ld	r24, Z+
 5f4:	5f 01       	movw	r10, r30
 5f6:	b6 01       	movw	r22, r12
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 5fe:	21 10       	cpse	r2, r1
 600:	2a 94       	dec	r2
 602:	21 e0       	ldi	r18, 0x01	; 1
 604:	82 1a       	sub	r8, r18
 606:	91 08       	sbc	r9, r1
 608:	81 14       	cp	r8, r1
 60a:	91 04       	cpc	r9, r1
 60c:	71 f7       	brne	.-36     	; 0x5ea <vfprintf+0x1a4>
 60e:	e8 c0       	rjmp	.+464    	; 0x7e0 <vfprintf+0x39a>
 610:	84 36       	cpi	r24, 0x64	; 100
 612:	11 f0       	breq	.+4      	; 0x618 <vfprintf+0x1d2>
 614:	89 36       	cpi	r24, 0x69	; 105
 616:	41 f5       	brne	.+80     	; 0x668 <vfprintf+0x222>
 618:	f8 01       	movw	r30, r16
 61a:	37 fe       	sbrs	r3, 7
 61c:	07 c0       	rjmp	.+14     	; 0x62c <vfprintf+0x1e6>
 61e:	60 81       	ld	r22, Z
 620:	71 81       	ldd	r23, Z+1	; 0x01
 622:	82 81       	ldd	r24, Z+2	; 0x02
 624:	93 81       	ldd	r25, Z+3	; 0x03
 626:	0c 5f       	subi	r16, 0xFC	; 252
 628:	1f 4f       	sbci	r17, 0xFF	; 255
 62a:	08 c0       	rjmp	.+16     	; 0x63c <vfprintf+0x1f6>
 62c:	60 81       	ld	r22, Z
 62e:	71 81       	ldd	r23, Z+1	; 0x01
 630:	07 2e       	mov	r0, r23
 632:	00 0c       	add	r0, r0
 634:	88 0b       	sbc	r24, r24
 636:	99 0b       	sbc	r25, r25
 638:	0e 5f       	subi	r16, 0xFE	; 254
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	f3 2d       	mov	r31, r3
 63e:	ff 76       	andi	r31, 0x6F	; 111
 640:	3f 2e       	mov	r3, r31
 642:	97 ff       	sbrs	r25, 7
 644:	09 c0       	rjmp	.+18     	; 0x658 <vfprintf+0x212>
 646:	90 95       	com	r25
 648:	80 95       	com	r24
 64a:	70 95       	com	r23
 64c:	61 95       	neg	r22
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	f0 68       	ori	r31, 0x80	; 128
 656:	3f 2e       	mov	r3, r31
 658:	2a e0       	ldi	r18, 0x0A	; 10
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	a3 01       	movw	r20, r6
 65e:	0e 94 56 04 	call	0x8ac	; 0x8ac <__ultoa_invert>
 662:	88 2e       	mov	r8, r24
 664:	86 18       	sub	r8, r6
 666:	45 c0       	rjmp	.+138    	; 0x6f2 <vfprintf+0x2ac>
 668:	85 37       	cpi	r24, 0x75	; 117
 66a:	31 f4       	brne	.+12     	; 0x678 <vfprintf+0x232>
 66c:	23 2d       	mov	r18, r3
 66e:	2f 7e       	andi	r18, 0xEF	; 239
 670:	b2 2e       	mov	r11, r18
 672:	2a e0       	ldi	r18, 0x0A	; 10
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	25 c0       	rjmp	.+74     	; 0x6c2 <vfprintf+0x27c>
 678:	93 2d       	mov	r25, r3
 67a:	99 7f       	andi	r25, 0xF9	; 249
 67c:	b9 2e       	mov	r11, r25
 67e:	8f 36       	cpi	r24, 0x6F	; 111
 680:	c1 f0       	breq	.+48     	; 0x6b2 <vfprintf+0x26c>
 682:	18 f4       	brcc	.+6      	; 0x68a <vfprintf+0x244>
 684:	88 35       	cpi	r24, 0x58	; 88
 686:	79 f0       	breq	.+30     	; 0x6a6 <vfprintf+0x260>
 688:	b5 c0       	rjmp	.+362    	; 0x7f4 <vfprintf+0x3ae>
 68a:	80 37       	cpi	r24, 0x70	; 112
 68c:	19 f0       	breq	.+6      	; 0x694 <vfprintf+0x24e>
 68e:	88 37       	cpi	r24, 0x78	; 120
 690:	21 f0       	breq	.+8      	; 0x69a <vfprintf+0x254>
 692:	b0 c0       	rjmp	.+352    	; 0x7f4 <vfprintf+0x3ae>
 694:	e9 2f       	mov	r30, r25
 696:	e0 61       	ori	r30, 0x10	; 16
 698:	be 2e       	mov	r11, r30
 69a:	b4 fe       	sbrs	r11, 4
 69c:	0d c0       	rjmp	.+26     	; 0x6b8 <vfprintf+0x272>
 69e:	fb 2d       	mov	r31, r11
 6a0:	f4 60       	ori	r31, 0x04	; 4
 6a2:	bf 2e       	mov	r11, r31
 6a4:	09 c0       	rjmp	.+18     	; 0x6b8 <vfprintf+0x272>
 6a6:	34 fe       	sbrs	r3, 4
 6a8:	0a c0       	rjmp	.+20     	; 0x6be <vfprintf+0x278>
 6aa:	29 2f       	mov	r18, r25
 6ac:	26 60       	ori	r18, 0x06	; 6
 6ae:	b2 2e       	mov	r11, r18
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <vfprintf+0x278>
 6b2:	28 e0       	ldi	r18, 0x08	; 8
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <vfprintf+0x27c>
 6b8:	20 e1       	ldi	r18, 0x10	; 16
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <vfprintf+0x27c>
 6be:	20 e1       	ldi	r18, 0x10	; 16
 6c0:	32 e0       	ldi	r19, 0x02	; 2
 6c2:	f8 01       	movw	r30, r16
 6c4:	b7 fe       	sbrs	r11, 7
 6c6:	07 c0       	rjmp	.+14     	; 0x6d6 <vfprintf+0x290>
 6c8:	60 81       	ld	r22, Z
 6ca:	71 81       	ldd	r23, Z+1	; 0x01
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	0c 5f       	subi	r16, 0xFC	; 252
 6d2:	1f 4f       	sbci	r17, 0xFF	; 255
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <vfprintf+0x29c>
 6d6:	60 81       	ld	r22, Z
 6d8:	71 81       	ldd	r23, Z+1	; 0x01
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 5f       	subi	r16, 0xFE	; 254
 6e0:	1f 4f       	sbci	r17, 0xFF	; 255
 6e2:	a3 01       	movw	r20, r6
 6e4:	0e 94 56 04 	call	0x8ac	; 0x8ac <__ultoa_invert>
 6e8:	88 2e       	mov	r8, r24
 6ea:	86 18       	sub	r8, r6
 6ec:	fb 2d       	mov	r31, r11
 6ee:	ff 77       	andi	r31, 0x7F	; 127
 6f0:	3f 2e       	mov	r3, r31
 6f2:	36 fe       	sbrs	r3, 6
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <vfprintf+0x2ca>
 6f6:	23 2d       	mov	r18, r3
 6f8:	2e 7f       	andi	r18, 0xFE	; 254
 6fa:	a2 2e       	mov	r10, r18
 6fc:	89 14       	cp	r8, r9
 6fe:	58 f4       	brcc	.+22     	; 0x716 <vfprintf+0x2d0>
 700:	34 fe       	sbrs	r3, 4
 702:	0b c0       	rjmp	.+22     	; 0x71a <vfprintf+0x2d4>
 704:	32 fc       	sbrc	r3, 2
 706:	09 c0       	rjmp	.+18     	; 0x71a <vfprintf+0x2d4>
 708:	83 2d       	mov	r24, r3
 70a:	8e 7e       	andi	r24, 0xEE	; 238
 70c:	a8 2e       	mov	r10, r24
 70e:	05 c0       	rjmp	.+10     	; 0x71a <vfprintf+0x2d4>
 710:	b8 2c       	mov	r11, r8
 712:	a3 2c       	mov	r10, r3
 714:	03 c0       	rjmp	.+6      	; 0x71c <vfprintf+0x2d6>
 716:	b8 2c       	mov	r11, r8
 718:	01 c0       	rjmp	.+2      	; 0x71c <vfprintf+0x2d6>
 71a:	b9 2c       	mov	r11, r9
 71c:	a4 fe       	sbrs	r10, 4
 71e:	0f c0       	rjmp	.+30     	; 0x73e <vfprintf+0x2f8>
 720:	fe 01       	movw	r30, r28
 722:	e8 0d       	add	r30, r8
 724:	f1 1d       	adc	r31, r1
 726:	80 81       	ld	r24, Z
 728:	80 33       	cpi	r24, 0x30	; 48
 72a:	21 f4       	brne	.+8      	; 0x734 <vfprintf+0x2ee>
 72c:	9a 2d       	mov	r25, r10
 72e:	99 7e       	andi	r25, 0xE9	; 233
 730:	a9 2e       	mov	r10, r25
 732:	09 c0       	rjmp	.+18     	; 0x746 <vfprintf+0x300>
 734:	a2 fe       	sbrs	r10, 2
 736:	06 c0       	rjmp	.+12     	; 0x744 <vfprintf+0x2fe>
 738:	b3 94       	inc	r11
 73a:	b3 94       	inc	r11
 73c:	04 c0       	rjmp	.+8      	; 0x746 <vfprintf+0x300>
 73e:	8a 2d       	mov	r24, r10
 740:	86 78       	andi	r24, 0x86	; 134
 742:	09 f0       	breq	.+2      	; 0x746 <vfprintf+0x300>
 744:	b3 94       	inc	r11
 746:	a3 fc       	sbrc	r10, 3
 748:	11 c0       	rjmp	.+34     	; 0x76c <vfprintf+0x326>
 74a:	a0 fe       	sbrs	r10, 0
 74c:	06 c0       	rjmp	.+12     	; 0x75a <vfprintf+0x314>
 74e:	b2 14       	cp	r11, r2
 750:	88 f4       	brcc	.+34     	; 0x774 <vfprintf+0x32e>
 752:	28 0c       	add	r2, r8
 754:	92 2c       	mov	r9, r2
 756:	9b 18       	sub	r9, r11
 758:	0e c0       	rjmp	.+28     	; 0x776 <vfprintf+0x330>
 75a:	b2 14       	cp	r11, r2
 75c:	60 f4       	brcc	.+24     	; 0x776 <vfprintf+0x330>
 75e:	b6 01       	movw	r22, r12
 760:	80 e2       	ldi	r24, 0x20	; 32
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 768:	b3 94       	inc	r11
 76a:	f7 cf       	rjmp	.-18     	; 0x75a <vfprintf+0x314>
 76c:	b2 14       	cp	r11, r2
 76e:	18 f4       	brcc	.+6      	; 0x776 <vfprintf+0x330>
 770:	2b 18       	sub	r2, r11
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0x332>
 774:	98 2c       	mov	r9, r8
 776:	21 2c       	mov	r2, r1
 778:	a4 fe       	sbrs	r10, 4
 77a:	10 c0       	rjmp	.+32     	; 0x79c <vfprintf+0x356>
 77c:	b6 01       	movw	r22, r12
 77e:	80 e3       	ldi	r24, 0x30	; 48
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 786:	a2 fe       	sbrs	r10, 2
 788:	17 c0       	rjmp	.+46     	; 0x7b8 <vfprintf+0x372>
 78a:	a1 fc       	sbrc	r10, 1
 78c:	03 c0       	rjmp	.+6      	; 0x794 <vfprintf+0x34e>
 78e:	88 e7       	ldi	r24, 0x78	; 120
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x352>
 794:	88 e5       	ldi	r24, 0x58	; 88
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	b6 01       	movw	r22, r12
 79a:	0c c0       	rjmp	.+24     	; 0x7b4 <vfprintf+0x36e>
 79c:	8a 2d       	mov	r24, r10
 79e:	86 78       	andi	r24, 0x86	; 134
 7a0:	59 f0       	breq	.+22     	; 0x7b8 <vfprintf+0x372>
 7a2:	a1 fe       	sbrs	r10, 1
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <vfprintf+0x364>
 7a6:	8b e2       	ldi	r24, 0x2B	; 43
 7a8:	01 c0       	rjmp	.+2      	; 0x7ac <vfprintf+0x366>
 7aa:	80 e2       	ldi	r24, 0x20	; 32
 7ac:	a7 fc       	sbrc	r10, 7
 7ae:	8d e2       	ldi	r24, 0x2D	; 45
 7b0:	b6 01       	movw	r22, r12
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 7b8:	89 14       	cp	r8, r9
 7ba:	38 f4       	brcc	.+14     	; 0x7ca <vfprintf+0x384>
 7bc:	b6 01       	movw	r22, r12
 7be:	80 e3       	ldi	r24, 0x30	; 48
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 7c6:	9a 94       	dec	r9
 7c8:	f7 cf       	rjmp	.-18     	; 0x7b8 <vfprintf+0x372>
 7ca:	8a 94       	dec	r8
 7cc:	f3 01       	movw	r30, r6
 7ce:	e8 0d       	add	r30, r8
 7d0:	f1 1d       	adc	r31, r1
 7d2:	80 81       	ld	r24, Z
 7d4:	b6 01       	movw	r22, r12
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 7dc:	81 10       	cpse	r8, r1
 7de:	f5 cf       	rjmp	.-22     	; 0x7ca <vfprintf+0x384>
 7e0:	22 20       	and	r2, r2
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <vfprintf+0x3a0>
 7e4:	42 ce       	rjmp	.-892    	; 0x46a <vfprintf+0x24>
 7e6:	b6 01       	movw	r22, r12
 7e8:	80 e2       	ldi	r24, 0x20	; 32
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 1a 04 	call	0x834	; 0x834 <fputc>
 7f0:	2a 94       	dec	r2
 7f2:	f6 cf       	rjmp	.-20     	; 0x7e0 <vfprintf+0x39a>
 7f4:	f6 01       	movw	r30, r12
 7f6:	86 81       	ldd	r24, Z+6	; 0x06
 7f8:	97 81       	ldd	r25, Z+7	; 0x07
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	2b 96       	adiw	r28, 0x0b	; 11
 802:	e2 e1       	ldi	r30, 0x12	; 18
 804:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__epilogue_restores__>

00000808 <strnlen_P>:
 808:	fc 01       	movw	r30, r24
 80a:	05 90       	lpm	r0, Z+
 80c:	61 50       	subi	r22, 0x01	; 1
 80e:	70 40       	sbci	r23, 0x00	; 0
 810:	01 10       	cpse	r0, r1
 812:	d8 f7       	brcc	.-10     	; 0x80a <strnlen_P+0x2>
 814:	80 95       	com	r24
 816:	90 95       	com	r25
 818:	8e 0f       	add	r24, r30
 81a:	9f 1f       	adc	r25, r31
 81c:	08 95       	ret

0000081e <strnlen>:
 81e:	fc 01       	movw	r30, r24
 820:	61 50       	subi	r22, 0x01	; 1
 822:	70 40       	sbci	r23, 0x00	; 0
 824:	01 90       	ld	r0, Z+
 826:	01 10       	cpse	r0, r1
 828:	d8 f7       	brcc	.-10     	; 0x820 <strnlen+0x2>
 82a:	80 95       	com	r24
 82c:	90 95       	com	r25
 82e:	8e 0f       	add	r24, r30
 830:	9f 1f       	adc	r25, r31
 832:	08 95       	ret

00000834 <fputc>:
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	fb 01       	movw	r30, r22
 83e:	23 81       	ldd	r18, Z+3	; 0x03
 840:	21 fd       	sbrc	r18, 1
 842:	03 c0       	rjmp	.+6      	; 0x84a <fputc+0x16>
 844:	8f ef       	ldi	r24, 0xFF	; 255
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	2c c0       	rjmp	.+88     	; 0x8a2 <fputc+0x6e>
 84a:	22 ff       	sbrs	r18, 2
 84c:	16 c0       	rjmp	.+44     	; 0x87a <fputc+0x46>
 84e:	46 81       	ldd	r20, Z+6	; 0x06
 850:	57 81       	ldd	r21, Z+7	; 0x07
 852:	24 81       	ldd	r18, Z+4	; 0x04
 854:	35 81       	ldd	r19, Z+5	; 0x05
 856:	42 17       	cp	r20, r18
 858:	53 07       	cpc	r21, r19
 85a:	44 f4       	brge	.+16     	; 0x86c <fputc+0x38>
 85c:	a0 81       	ld	r26, Z
 85e:	b1 81       	ldd	r27, Z+1	; 0x01
 860:	9d 01       	movw	r18, r26
 862:	2f 5f       	subi	r18, 0xFF	; 255
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	31 83       	std	Z+1, r19	; 0x01
 868:	20 83       	st	Z, r18
 86a:	8c 93       	st	X, r24
 86c:	26 81       	ldd	r18, Z+6	; 0x06
 86e:	37 81       	ldd	r19, Z+7	; 0x07
 870:	2f 5f       	subi	r18, 0xFF	; 255
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	37 83       	std	Z+7, r19	; 0x07
 876:	26 83       	std	Z+6, r18	; 0x06
 878:	14 c0       	rjmp	.+40     	; 0x8a2 <fputc+0x6e>
 87a:	8b 01       	movw	r16, r22
 87c:	ec 01       	movw	r28, r24
 87e:	fb 01       	movw	r30, r22
 880:	00 84       	ldd	r0, Z+8	; 0x08
 882:	f1 85       	ldd	r31, Z+9	; 0x09
 884:	e0 2d       	mov	r30, r0
 886:	09 95       	icall
 888:	89 2b       	or	r24, r25
 88a:	e1 f6       	brne	.-72     	; 0x844 <fputc+0x10>
 88c:	d8 01       	movw	r26, r16
 88e:	16 96       	adiw	r26, 0x06	; 6
 890:	8d 91       	ld	r24, X+
 892:	9c 91       	ld	r25, X
 894:	17 97       	sbiw	r26, 0x07	; 7
 896:	01 96       	adiw	r24, 0x01	; 1
 898:	17 96       	adiw	r26, 0x07	; 7
 89a:	9c 93       	st	X, r25
 89c:	8e 93       	st	-X, r24
 89e:	16 97       	sbiw	r26, 0x06	; 6
 8a0:	ce 01       	movw	r24, r28
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	08 95       	ret

000008ac <__ultoa_invert>:
 8ac:	fa 01       	movw	r30, r20
 8ae:	aa 27       	eor	r26, r26
 8b0:	28 30       	cpi	r18, 0x08	; 8
 8b2:	51 f1       	breq	.+84     	; 0x908 <__stack+0x9>
 8b4:	20 31       	cpi	r18, 0x10	; 16
 8b6:	81 f1       	breq	.+96     	; 0x918 <__stack+0x19>
 8b8:	e8 94       	clt
 8ba:	6f 93       	push	r22
 8bc:	6e 7f       	andi	r22, 0xFE	; 254
 8be:	6e 5f       	subi	r22, 0xFE	; 254
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	af 4f       	sbci	r26, 0xFF	; 255
 8c8:	b1 e0       	ldi	r27, 0x01	; 1
 8ca:	3e d0       	rcall	.+124    	; 0x948 <__stack+0x49>
 8cc:	b4 e0       	ldi	r27, 0x04	; 4
 8ce:	3c d0       	rcall	.+120    	; 0x948 <__stack+0x49>
 8d0:	67 0f       	add	r22, r23
 8d2:	78 1f       	adc	r23, r24
 8d4:	89 1f       	adc	r24, r25
 8d6:	9a 1f       	adc	r25, r26
 8d8:	a1 1d       	adc	r26, r1
 8da:	68 0f       	add	r22, r24
 8dc:	79 1f       	adc	r23, r25
 8de:	8a 1f       	adc	r24, r26
 8e0:	91 1d       	adc	r25, r1
 8e2:	a1 1d       	adc	r26, r1
 8e4:	6a 0f       	add	r22, r26
 8e6:	71 1d       	adc	r23, r1
 8e8:	81 1d       	adc	r24, r1
 8ea:	91 1d       	adc	r25, r1
 8ec:	a1 1d       	adc	r26, r1
 8ee:	20 d0       	rcall	.+64     	; 0x930 <__stack+0x31>
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <__ultoa_invert+0x48>
 8f2:	68 94       	set
 8f4:	3f 91       	pop	r19
 8f6:	2a e0       	ldi	r18, 0x0A	; 10
 8f8:	26 9f       	mul	r18, r22
 8fa:	11 24       	eor	r1, r1
 8fc:	30 19       	sub	r19, r0
 8fe:	30 5d       	subi	r19, 0xD0	; 208
 900:	31 93       	st	Z+, r19
 902:	de f6       	brtc	.-74     	; 0x8ba <__ultoa_invert+0xe>
 904:	cf 01       	movw	r24, r30
 906:	08 95       	ret
 908:	46 2f       	mov	r20, r22
 90a:	47 70       	andi	r20, 0x07	; 7
 90c:	40 5d       	subi	r20, 0xD0	; 208
 90e:	41 93       	st	Z+, r20
 910:	b3 e0       	ldi	r27, 0x03	; 3
 912:	0f d0       	rcall	.+30     	; 0x932 <__stack+0x33>
 914:	c9 f7       	brne	.-14     	; 0x908 <__stack+0x9>
 916:	f6 cf       	rjmp	.-20     	; 0x904 <__stack+0x5>
 918:	46 2f       	mov	r20, r22
 91a:	4f 70       	andi	r20, 0x0F	; 15
 91c:	40 5d       	subi	r20, 0xD0	; 208
 91e:	4a 33       	cpi	r20, 0x3A	; 58
 920:	18 f0       	brcs	.+6      	; 0x928 <__stack+0x29>
 922:	49 5d       	subi	r20, 0xD9	; 217
 924:	31 fd       	sbrc	r19, 1
 926:	40 52       	subi	r20, 0x20	; 32
 928:	41 93       	st	Z+, r20
 92a:	02 d0       	rcall	.+4      	; 0x930 <__stack+0x31>
 92c:	a9 f7       	brne	.-22     	; 0x918 <__stack+0x19>
 92e:	ea cf       	rjmp	.-44     	; 0x904 <__stack+0x5>
 930:	b4 e0       	ldi	r27, 0x04	; 4
 932:	a6 95       	lsr	r26
 934:	97 95       	ror	r25
 936:	87 95       	ror	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	ba 95       	dec	r27
 93e:	c9 f7       	brne	.-14     	; 0x932 <__stack+0x33>
 940:	00 97       	sbiw	r24, 0x00	; 0
 942:	61 05       	cpc	r22, r1
 944:	71 05       	cpc	r23, r1
 946:	08 95       	ret
 948:	9b 01       	movw	r18, r22
 94a:	ac 01       	movw	r20, r24
 94c:	0a 2e       	mov	r0, r26
 94e:	06 94       	lsr	r0
 950:	57 95       	ror	r21
 952:	47 95       	ror	r20
 954:	37 95       	ror	r19
 956:	27 95       	ror	r18
 958:	ba 95       	dec	r27
 95a:	c9 f7       	brne	.-14     	; 0x94e <__stack+0x4f>
 95c:	62 0f       	add	r22, r18
 95e:	73 1f       	adc	r23, r19
 960:	84 1f       	adc	r24, r20
 962:	95 1f       	adc	r25, r21
 964:	a0 1d       	adc	r26, r0
 966:	08 95       	ret

00000968 <__prologue_saves__>:
 968:	2f 92       	push	r2
 96a:	3f 92       	push	r3
 96c:	4f 92       	push	r4
 96e:	5f 92       	push	r5
 970:	6f 92       	push	r6
 972:	7f 92       	push	r7
 974:	8f 92       	push	r8
 976:	9f 92       	push	r9
 978:	af 92       	push	r10
 97a:	bf 92       	push	r11
 97c:	cf 92       	push	r12
 97e:	df 92       	push	r13
 980:	ef 92       	push	r14
 982:	ff 92       	push	r15
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	cd b7       	in	r28, 0x3d	; 61
 98e:	de b7       	in	r29, 0x3e	; 62
 990:	ca 1b       	sub	r28, r26
 992:	db 0b       	sbc	r29, r27
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	f8 94       	cli
 998:	de bf       	out	0x3e, r29	; 62
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	cd bf       	out	0x3d, r28	; 61
 99e:	09 94       	ijmp

000009a0 <__epilogue_restores__>:
 9a0:	2a 88       	ldd	r2, Y+18	; 0x12
 9a2:	39 88       	ldd	r3, Y+17	; 0x11
 9a4:	48 88       	ldd	r4, Y+16	; 0x10
 9a6:	5f 84       	ldd	r5, Y+15	; 0x0f
 9a8:	6e 84       	ldd	r6, Y+14	; 0x0e
 9aa:	7d 84       	ldd	r7, Y+13	; 0x0d
 9ac:	8c 84       	ldd	r8, Y+12	; 0x0c
 9ae:	9b 84       	ldd	r9, Y+11	; 0x0b
 9b0:	aa 84       	ldd	r10, Y+10	; 0x0a
 9b2:	b9 84       	ldd	r11, Y+9	; 0x09
 9b4:	c8 84       	ldd	r12, Y+8	; 0x08
 9b6:	df 80       	ldd	r13, Y+7	; 0x07
 9b8:	ee 80       	ldd	r14, Y+6	; 0x06
 9ba:	fd 80       	ldd	r15, Y+5	; 0x05
 9bc:	0c 81       	ldd	r16, Y+4	; 0x04
 9be:	1b 81       	ldd	r17, Y+3	; 0x03
 9c0:	aa 81       	ldd	r26, Y+2	; 0x02
 9c2:	b9 81       	ldd	r27, Y+1	; 0x01
 9c4:	ce 0f       	add	r28, r30
 9c6:	d1 1d       	adc	r29, r1
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	ed 01       	movw	r28, r26
 9d4:	08 95       	ret

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
