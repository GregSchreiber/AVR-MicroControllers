
Serial Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078e  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d2  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000157  00000000  00000000  0000178a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_18>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 * Arguments: Nil
 */
int main(void) {
	
	// Set the baud rate to 19200
	UBRR0 = 51;
  80:	83 e3       	ldi	r24, 0x33	; 51
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  88:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// On board LED is connected to Pin B5
	DDRB = (1<<5);
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	84 b9       	out	0x04, r24	; 4
	 * Enable the following bits
	 * Bit 3 - TXEN0 - Transmit Enable
	 * Bit 4 - RXEN0 - Receive Enable
	 * Bit 7 - RXCIE0 - Receive Complete Interrupt
	 */
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  90:	88 e9       	ldi	r24, 0x98	; 152
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Enable Interrupts
	sei();
  96:	78 94       	sei
		
    // Application Code
    while (1) {
		
		// Heartbeat
		PORTB = (1<<5);
  98:	80 e2       	ldi	r24, 0x20	; 32
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	83 ed       	ldi	r24, 0xD3	; 211
  a0:	90 e3       	ldi	r25, 0x30	; 48
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
		_delay_ms(1000);
		PORTB = (0<<5);
  ae:	15 b8       	out	0x05, r1	; 5
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
  c2:	ea cf       	rjmp	.-44     	; 0x98 <main+0x18>

000000c4 <__vector_18>:
 *
 * This interrupt writes it back in an upper case format
 *
 * Interrupt Vector Initialized above as a character has arrived in the UART Data Register
 */
ISR(USART_RX_vect) {
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ef 93       	push	r30
  e8:	ff 93       	push	r31
	
	// Input Character (No need to declare this as volatile as its not a global variable)
	char input;

	// Move the character from the input register
	input = UDR0;
  ea:	c6 ec       	ldi	r28, 0xC6	; 198
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	88 81       	ld	r24, Y

	// Convert character to upper case if it is lower case
	input = toupper(input);
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 8f 00 	call	0x11e	; 0x11e <toupper>

	// Send the character back over the serial connection
	UDR0 = input;
  f6:	88 83       	st	Y, r24
}
  f8:	ff 91       	pop	r31
  fa:	ef 91       	pop	r30
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	7f 91       	pop	r23
 10a:	6f 91       	pop	r22
 10c:	5f 91       	pop	r21
 10e:	4f 91       	pop	r20
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <toupper>:
 11e:	91 11       	cpse	r25, r1
 120:	08 95       	ret
 122:	81 56       	subi	r24, 0x61	; 97
 124:	8a 51       	subi	r24, 0x1A	; 26
 126:	08 f4       	brcc	.+2      	; 0x12a <toupper+0xc>
 128:	80 52       	subi	r24, 0x20	; 32
 12a:	85 58       	subi	r24, 0x85	; 133
 12c:	08 95       	ret

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
